{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "relative-location",
   "metadata": {},
   "source": [
    "## 第10讲 乌龟爬井"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d12f05dd",
   "metadata": {},
   "source": [
    "### 问题描述\n",
    "\n",
    "一个小乌龟正打算从一个12米深的井底往上爬，每一天的白天它会向上爬2米，可是在夜间它会倒退0.8米。当有一天小乌龟爬到井口到达地面时它就不会再往下退了。现在问你，小乌龟需要花费多少天才能从井底爬到地面上。使用Turtle绘图库模拟乌龟爬井整个过程，同时在终端输出在每个第二天来临前小乌龟的位置（用它距离井底的距离来表示）"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "animated-batch",
   "metadata": {},
   "source": [
    "### 数学背景\n",
    "\n",
    "- 数的大小判断，利用数学知识解决实际问题"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "sorted-furniture",
   "metadata": {
    "heading_collapsed": true
   },
   "source": [
    "### 程序设计"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "841e9239",
   "metadata": {},
   "source": [
    "```python\n",
    "print(\"I am learning programming.\")\n",
    "print('I am learning programming.')\n",
    "1+2+3+4+5+6+7+8+9+10\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d55f37d9",
   "metadata": {
    "tags": []
   },
   "source": [
    "### 完整代码"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "ac630781",
   "metadata": {},
   "outputs": [],
   "source": [
    "from turtle import setup, reset, clear, screensize, pu, pd, fd, bk, goto, mode\n",
    "from turtle import speed, left, right, seth, circle, bye, setworldcoordinates\n",
    "from turtle import degrees"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "40d3f1cc-cf02-4275-99f1-a188940925d1",
   "metadata": {},
   "outputs": [],
   "source": [
    "setup(800, 800, 0, 0) # prepare a draw area with length and with are 500 and 400\n",
    "                      # respectively. 准备一个大小为500*400的绘图区\n",
    "#setworldcoordinates(0, 0, 10, 20)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "ea2bdb5c",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "clear()\n",
    "reset()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "bcc191fa",
   "metadata": {},
   "outputs": [],
   "source": [
    "from math import cos, sin, pi\n",
    "def to_radian(degree):\n",
    "    return degree * pi / 180\n",
    "\n",
    "def draw_well(cb=(4,1), width_bottom=2, height=12, tilt=0):\n",
    "    width_top = width_bottom - 2 * height * sin(to_radian(tilt))\n",
    "    pu()\n",
    "    goto(cb)\n",
    "    pd()\n",
    "    goto((cb[0]+width_bottom/2, cb[1]))\n",
    "    rb_x = cb[0] - height * sin(to_radian(tilt))\n",
    "    goto((rb_x, cb[1]+height))\n",
    "    goto((rb_x - width_top, cb[1]+height))\n",
    "    pu()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5f2a4092-46ef-4455-8e99-b430264bac8c",
   "metadata": {},
   "outputs": [],
   "source": [
    "draw_well(cb=(4, 1), width_bottom=2, height=12, tilt=0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a53083d1-8604-44e4-aadf-4d45cb8ba0ca",
   "metadata": {},
   "outputs": [],
   "source": [
    "left(90)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "24a9e00c-bec0-462c-99e4-a53a8fc2d58f",
   "metadata": {},
   "outputs": [],
   "source": [
    "seth(0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "3925d93d-546e-42c5-b2b8-26659a33dd58",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1\n",
      "1\n",
      "2\n",
      "3\n",
      "5\n",
      "8\n",
      "13\n",
      "21\n",
      "34\n",
      "55\n"
     ]
    }
   ],
   "source": [
    "clear()\n",
    "reset()\n",
    "seth(90)\n",
    "max_times = 10\n",
    "cur_times = 1\n",
    "cur_num = 1\n",
    "pre_num, pre_pre_num = None, None\n",
    "while cur_times <= max_times:\n",
    "    if cur_times < 3:\n",
    "        cur_num = 1\n",
    "        pre_num, pre_pre_num = 1, 1\n",
    "    else:\n",
    "        cur_num = pre_num + pre_pre_num\n",
    "\n",
    "    print(cur_num)\n",
    "    circle(cur_num*5, 90)\n",
    "    #fd(cur_num)\n",
    "    #left(90)\n",
    "    \n",
    "    pre_pre_num = pre_num\n",
    "    pre_num = cur_num\n",
    "    cur_times += 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "96a9ab2e-1a58-4480-9c4f-bed15da38c86",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d3152ba5-171b-4535-a478-dd7a39ee957b",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e9a4a5b6",
   "metadata": {},
   "outputs": [],
   "source": [
    "bye()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "latest-contamination",
   "metadata": {},
   "source": [
    "### 知识点小结"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "afb3f674",
   "metadata": {},
   "source": [
    "- 复习Turtle绘图库\n",
    "- 初步学习创建自定义的方法，了解创建自定义方法时语法规则\n",
    "- 复习循环语句"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "rural-branch",
   "metadata": {
    "hidden": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "urban-glance",
   "metadata": {
    "hidden": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "bizarre-assurance",
   "metadata": {},
   "source": [
    "### 计算机小知识"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "92100f08",
   "metadata": {},
   "source": [
    "- Nowadays Computer is still not as smart as human is, but it calculates much much faster than human. 当今时代计算机的聪明程度仍然没法和人比，但是它的计算速度比人要快得多得多。"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "digital-consensus",
   "metadata": {
    "heading_collapsed": true
   },
   "source": [
    "### 练习"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "de4cfdc5",
   "metadata": {},
   "source": [
    "1. Use `print` to print out exactly the following sentences(including the final period). 使用`print`语句打印出完全一样的下面的句子（包括末尾的句号）。\n",
    "    - I love China and Canada.\n",
    "    - I like Python programming language, and I like Math too.\n",
    "    - Our teacher's name is Qiang.\n",
    "    - \"CN\" is the abbreviation of China.\n",
    "    - The abbreviation of Canda is \"CAD\".\n",
    "    \n",
    "   The code for printing out first sentence is already given as an example:\n",
    "   作为示例第一个句子已经给出答案：\n",
    "   ```python\n",
    "      print(\"I love China and Canada.\")\n",
    "   ```\n",
    "   Please write your codes for the rest sentences in below cells (one sentence in each cell).\n",
    "   请在下面几个小格子里编写代码输出剩余的句子（每一个单元格输出一个句子）。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "weighted-mortality",
   "metadata": {
    "hidden": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "worst-hierarchy",
   "metadata": {
    "hidden": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "constitutional-fairy",
   "metadata": {
    "hidden": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "killing-boxing",
   "metadata": {
    "hidden": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "dependent-brook",
   "metadata": {
    "hidden": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "cathedral-pursuit",
   "metadata": {
    "hidden": true
   },
   "source": [
    "2. In the following cells, write codes to calculate the following Arithmetic expressions (one cell for each):\n",
    "   在下面的单元格中，编写代码计算下面的算术表达式（每一个式子使用一个单元格）:\n",
    "   \n",
    "    - $1+3+5+7+9+11+13+15+17+19$\n",
    "    - $10-9+8-7+6-5+4-3+2-1$\n",
    "    - $3.14\\times 2\\times 5$\n",
    "    - $2\\times(6+9)$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "controlled-masters",
   "metadata": {
    "hidden": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "steady-wagner",
   "metadata": {
    "hidden": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "colonial-edinburgh",
   "metadata": {
    "hidden": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "clean-italian",
   "metadata": {
    "hidden": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "controversial-sleeve",
   "metadata": {
    "hidden": true
   },
   "source": [
    "3. The length and width of a rectangle are 18cm and 13cm respectively. What the perimeter and the area of this rectangle? write only two lines of codes to provide the answer directly, and an extra line of code to print out the result like the follow sentence:\n",
    "   \n",
    "   <i>\"The perimeter of this rectangle is xxx cm, and its area is xxx cm*cm.\"</i>\n",
    "   \n",
    "   Replace the xxx by your results. \n",
    "   \n",
    "   一个长方形的长和宽分别是18厘米和13厘米，它的周长和面积分别是多少？通过只编写两行代码给出答案，并使用额外一行代码输出如下格式的一句话：\n",
    "   \n",
    "   <i>“这个长方形的周长是 xxx cm，它的面积是 xxx cm*cm。”</i>\n",
    "   \n",
    "   用你得到的结果替代上面的 xxx。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "floppy-audience",
   "metadata": {
    "hidden": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "contemporary-indonesia",
   "metadata": {
    "hidden": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "healthy-auditor",
   "metadata": {
    "hidden": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4cb71f58-68c6-4b1f-8fa4-34721e87023e",
   "metadata": {},
   "outputs": [],
   "source": [
    "left(90)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
