{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "relative-location",
   "metadata": {},
   "source": [
    "## 第2讲 起个名字吧"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "latest-contamination",
   "metadata": {},
   "source": [
    "### Objective 学习目标\n",
    "\n",
    "- Understand what a variable is 理解什么是变量\n",
    "- The key to learn a programming language is to learn the syntax/format/style of the languange 学习一门编程语言的关键在于学习这门语言的语法/格式/风格\n",
    "- Python is a case sensitive programming language Python中大小写不同表示不同的名称\n",
    "- Special meaning of \"=\" in programming 等于号在Programming中的另一种意义：赋值\n",
    "- Use variable to refer a string or a number 用变量表示字符串或数字\n",
    "- Write beautiful Python codes 书写漂亮的Python代码\n",
    "    - space between operator 操作符两边留一个空格\n",
    "    - assign multiple variables in one line 在一行代码中给多个变量赋值\n",
    "- Use `print` to print the value of a variable 用`print`打印变量值"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "animated-batch",
   "metadata": {},
   "source": [
    "### Math\n",
    "\n",
    "- $+$, $-$, $\\times$, $\\div$"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "sorted-furniture",
   "metadata": {},
   "source": [
    "### Python\n",
    "```python\n",
    "Jason = \"Jason\"\n",
    "```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "executed-mambo",
   "metadata": {},
   "outputs": [],
   "source": [
    "my_sentence = \"I am learning programming in Python.\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "organizational-jewel",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "I am learning programming in Python.\n"
     ]
    }
   ],
   "source": [
    "# a string\n",
    "print(my_sentence)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "ignored-russia",
   "metadata": {},
   "outputs": [],
   "source": [
    "my_sentence = \"I spoke another sentence.\"\n",
    "# expression 表达式\n",
    "# assignment expression 赋值表达式"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "cooked-laser",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "I spoke another sentence.\n"
     ]
    }
   ],
   "source": [
    "print(my_sentence)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "primary-taste",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2021\n",
      "2021\n"
     ]
    }
   ],
   "source": [
    "my_sentence = 2021\n",
    "print(my_sentence)\n",
    "my_sentence = \"2021\"\n",
    "print(my_sentence)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "encouraging-green",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "62 234 cm\n"
     ]
    }
   ],
   "source": [
    "cm = \"cm\"\n",
    "length, width, unit = 18, 13, cm\n",
    "perimeter = (length + width) * 2\n",
    "area = length * width\n",
    "# Jason:   62 234\n",
    "# Sophine: No output\n",
    "# Tony:    No output\n",
    "# Yunzi:   62 234\n",
    "print(perimeter, area, cm)\n",
    "# 62 234 cm"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "lesser-junction",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "James\n"
     ]
    }
   ],
   "source": [
    "print(\"James\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "diverse-diagnosis",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "I am learning programming in Python.\n"
     ]
    }
   ],
   "source": [
    "print(\"I am learning programming in Python.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "educated-philadelphia",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "I am learning programming in Python.\n"
     ]
    }
   ],
   "source": [
    "print(\"I am learning programming in Python.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "effective-chinese",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Jason: I am learning programming.\n",
      "Tony: I am learning programming too.\n",
      "Sophie: I am learning programming too.\n",
      "Yunzi: 我也在学习编程。\n"
     ]
    }
   ],
   "source": [
    "Jason_1 = \"Jason: I am learning programming.\"\n",
    "print(Jason_1)\n",
    "Tony_1 = \"Tony: I am learning programming too.\"\n",
    "print(Tony_1)\n",
    "Sophie_1 = \"Sophie: I am learning programming too.\"\n",
    "print(Sophie_1)\n",
    "Yunzi_1 = \"Yunzi: 我也在学习编程。\"\n",
    "print(Yunzi_1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "rural-branch",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Jason: I like it. How about you?\n",
      "Tony: It's interesting, I think.\n",
      "Sophie: The teacher is my Daddy.\n",
      "Jason: Really?\n",
      "Tony: It's funny, isn't it?\n",
      "Sophie: It's time to start the class, let's Zoom\n",
      "Yunzi: 马上就来。\n"
     ]
    }
   ],
   "source": [
    "\n",
    "\n",
    "Jason_2 = \"Jason: I like it. How about you?\"\n",
    "print(Jason_2)\n",
    "Tony_2 = \"Tony: It's interesting, I think.\"\n",
    "print(Tony_2)\n",
    "Sophie_2 = \"Sophie: The teacher is my Daddy.\"\n",
    "print(Sophie_2)\n",
    "Yunzi_2 = \"Yunzi: I know, but the teacher is my uncle.\"\n",
    "\n",
    "Jason_3 = \"Jason: Really?\"\n",
    "print(Jason_3)\n",
    "Tony_3 = \"Tony: It's funny, isn't it?\"\n",
    "print(Tony_3)\n",
    "Sophie_3 = \"Sophie: It's time to start the class, let's Zoom\"\n",
    "print(Sophie_3)\n",
    "Yunzi_3 = \"Yunzi: 马上就来。\"\n",
    "print(Yunzi_3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "invisible-shade",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "total age in my family is: 96\n"
     ]
    }
   ],
   "source": [
    "age_daddy = 41\n",
    "age_mummy = 39\n",
    "age_me = 11\n",
    "age_sister = 5\n",
    "\n",
    "age_total = age_daddy + age_mummy + age_me + age_sister\n",
    "print(\"total age in my family is:\", age_total)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "urban-glance",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "total age in my family is: 96\n"
     ]
    }
   ],
   "source": [
    "age_daddy, age_mummy, age_me, age_sister = 41, 39, 11, 5\n",
    "age_total = age_daddy + age_mummy + age_me + age_sister\n",
    "print(\"total age in my family is:\", age_total)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bizarre-assurance",
   "metadata": {},
   "source": [
    "### Did you know?\n",
    "- There are many programming languages, and Python is just one of them. Python language can almost do anything programming work you want to. 有许多种编程语言，Python只是其中的一种。Python语言几乎能帮你做任何你想做的关于编程的工作。"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "digital-consensus",
   "metadata": {},
   "source": [
    "### Exercise\n",
    "1. Design a dialog between you and one of you parents. Each person need to say at least three sentences to the other in turn. print the dialog out like the teacher did on class in one cell. 设计一段有关你和你父母其中之一的一段对话，要求每一个人交替说三句话。像老师在课堂上做的那样在一个单元格中打印出这段对话。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "weighted-mortality",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "cathedral-pursuit",
   "metadata": {},
   "source": [
    "2. The following codes have some errors; it cann't be successfully run. Try to find and fix the error so that the codes provides the total age of the students in the class.\n",
    "下面的代码中有一些错误导致它不能成功的运行。尝试着去修复这些错误并让程序输出班级里所有学生的年龄之和。\n",
    "```python\n",
    "age_Jason, age_Tony, age_Sophie, age_Yunzi = 10, 10, 9, 9\n",
    "age_total = age_jason + ageTony + agesophie + age_yunzi\n",
    "print(\"total age of these four students is\", age_Total) \n",
    "```\n",
    "Follow the steps listed below 按照下面的步骤来完成此题\n",
    "    - Copy the codes to a new cell 把上面三行代码复制到一个新的单元格中\n",
    "    - Click \"Run\" button and look at the errors 运行代码观察错误\n",
    "    - Copy the codes to next new cell 把上面代码复制到另一个新的单元格中\n",
    "    - Fix the errors and run the codes again till you see the correct result. 修复代码中的错误知道程序成功运行\n",
    "\n",
    "Note: Don't change the values of the age of each student even if your age is not the value.\n",
    "注意：不要修改题目给定的每个学生的年龄，即使你的年龄并不是那个数字。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "controlled-masters",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "steady-wagner",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "plastic-appreciation",
   "metadata": {},
   "source": [
    "3. The following codes, written by Celine, calculate the difference of the age between Celine and Yunzi. The codes are not well written but can provide correct result. Please help Celine to beautify the codes while keeping the result unchanged.\n",
    "思思写的下面一段代码计算了她自己和耘耔之间的年龄差。这些代码能正确运行但是写的不好看。请你帮助思思在不改变代码运行结果的前提下美化这段代码。\n",
    "```python\n",
    "Celine_age = 4\n",
    "age_yunzi=9\n",
    "cha =age_yunzi-Celine_age\n",
    "print(\"Yunzi bi Celine da\", cha, \"sui.\")\n",
    "```\n",
    "The codes are provided in below cell, beautify it directly on this cell and run it.\n",
    "这段代码已经在下面的单元格中给出，请直接在下面的单元格中修改美化代码，并运行它。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "clean-italian",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Yunzi bi Celine da 5 sui.\n"
     ]
    }
   ],
   "source": [
    "Celine_age = 4\n",
    "age_yunzi=9\n",
    "cha =age_yunzi-Celine_age\n",
    "print(\"Yunzi bi Celine da\", cha, \"sui.\")"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
