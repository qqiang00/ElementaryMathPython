{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "relative-location",
   "metadata": {},
   "source": [
    "## 第16讲 一共可以排出多少个不同的队伍"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d12f05dd",
   "metadata": {},
   "source": [
    "### Problem 问题描述"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dafd655e-8c99-4afd-b927-a30abfc0dff0",
   "metadata": {},
   "source": [
    "班级里的四个同学分别是：Jason, Sophie, Tony, Yunzi，他们按从前到后的次序排成一个纵队，可以排成多少个不一样的纵队？ 通过编程求解。\n",
    "\n",
    "提示：“纵队”是一种排队的方式，在纵队中，队伍中间的任何一个成员其左右两侧没有其他的队伍成员，其他成员只出现在它的前面和后方。同时排第一的成员前面没有别的成员，派最末位的成员后面没有别的成员。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "824c140c-4d86-4fc5-8753-f0fd8aa00cf2",
   "metadata": {},
   "outputs": [],
   "source": [
    "classmates = [\"Jason\", \"Sophie\", \"Tony\", \"Yunzi\"]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "animated-batch",
   "metadata": {},
   "source": [
    "### Math Background 数学背景\n",
    "\n",
    "1. 简单的排列组合\n",
    "2. 阶乘的概念"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "sorted-furniture",
   "metadata": {
    "heading_collapsed": true
   },
   "source": [
    "### Prerequisites 预备知识\n",
    "\n",
    "#### 1. 排列和组合"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b6e96735-3f72-4a1e-b229-3b3d8dd985af",
   "metadata": {},
   "source": [
    "    A. 考虑只有一个小朋友Jason排队的情形\n",
    "       - Jason\n",
    "\n",
    "    B. 考虑只有两个小朋友：Jason, Sophie 排队的情形\n",
    "       - Jason Sophie\n",
    "       - Sophie Jason\n",
    "\n",
    "    C. 考虑有三个小朋友：Jason, Sophie, Tony排队的情形 \n",
    "       - Jason Sophie Tony\n",
    "       - Jason Tony Sohie\n",
    "       - Sophie Jason Tony\n",
    "       - Tony Sophie Jason\n",
    "       - Sophie Tony Jason\n",
    "       - Tony Jason Sophie\n",
    "\n",
    "观察规律，写出有所有四个小朋友排队的各种可能性。\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "968340c2-789e-40e8-99b5-7a8fbb1234f5",
   "metadata": {},
   "source": [
    "#### 2. **Factorial 阶乘**\n",
    "- P1 = 1 = 1!\n",
    "- P2 = 2 * 1 = 2!\n",
    "- P3 = 3 * 2 * 1 = 3 * ( 2 * 1 ) = 3 * P2 = 3!\n",
    "- P4 = 4 * 3 * 2 * 1 = 4 * (3 * 2 * 1) = 4 * P3 = 4!\n",
    "- P5 = 5 * 4 * 3 * 2 * 1 = 5!\n",
    "- ...\n",
    "- Pn = n * (n-1) * (n-2) * ... * 2 * 1 = n!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "f7e98eb8-63a6-4410-aff3-d3bbdd366d7b",
   "metadata": {},
   "outputs": [],
   "source": [
    "def cal_num_queue(num_person):\n",
    "    #result = 1 * 2 * 3 * 4 * ... * num_person\n",
    "    result, factor = 1, 1\n",
    "    while factor <= num_person:\n",
    "        result = factor * result\n",
    "        factor += 1\n",
    "        #print(\"result: {}, factor: {}\".format(result, factor))\n",
    "        \n",
    "    print(\"There are {} queues altogether, if number of person is {}\".format\\\n",
    "          (result, num_person))\n",
    "    return"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "c946c887-ee07-41f2-bafe-cfcae2d73dfa",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "There are 720 queues altogether, if number of person is 6\n"
     ]
    }
   ],
   "source": [
    "cal_num_queue(6)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c12628ec-4144-4467-9077-45c72f37e56f",
   "metadata": {},
   "source": [
    "#### 3. 手动列举三个同学排队的所有可能性**\n",
    "\n",
    "for 3 classmates: \"Jason\", \"Sophie\", \"Tony\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "bddf82d7-12fc-495d-b69f-a07bc2ef80d6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "('Jason', 'Sophie', 'Tony')\n",
      "('Jason', 'Tony', 'Sophie')\n",
      "('Sophie', 'Jason', 'Tony')\n",
      "('Sophie', 'Tony', 'Jason')\n",
      "('Tony', 'Jason', 'Sophie')\n",
      "('Tony', 'Sophie', 'Jason')\n"
     ]
    }
   ],
   "source": [
    "classmates = [\"Jason\", \"Sophie\", \"Tony\"]\n",
    "queues = []          # store all the queues generated 保存所有生成的队伍 \n",
    "n_classmates = len(classmates)\n",
    "first, second, third = None, None, None\n",
    "\n",
    "first, second, third = \"Jason\", \"Sophie\", \"Tony\"\n",
    "queues.append((first, second, third))\n",
    "\n",
    "first, second, third = \"Jason\", \"Tony\", \"Sophie\"\n",
    "queues.append((first, second, third))\n",
    "\n",
    "first, second, third = \"Sophie\", \"Jason\", \"Tony\"\n",
    "queues.append((first, second, third))\n",
    "\n",
    "first, second, third = \"Sophie\", \"Tony\", \"Jason\"\n",
    "queues.append((first, second, third))\n",
    "\n",
    "first, second, third = \"Tony\", \"Jason\", \"Sophie\"\n",
    "queues.append((first, second, third))\n",
    "\n",
    "first, second, third = \"Tony\", \"Sophie\", \"Jason\"\n",
    "queues.append( (first, second, third) )  # tuple, \n",
    "\n",
    "for q in queues:\n",
    "    print(q)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bbc3ab29-d17b-4ec6-8642-2c848b439ed4",
   "metadata": {},
   "source": [
    "#### 4. 使用while循环列出所有可能的排队"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "6e461421-f6a2-4435-9372-da115e62ded6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "('Jason', 'Sophie', 'Tony')\n",
      "('Jason', 'Tony', 'Sophie')\n",
      "('Sophie', 'Jason', 'Tony')\n",
      "('Sophie', 'Tony', 'Jason')\n",
      "('Tony', 'Jason', 'Sophie')\n",
      "('Tony', 'Sophie', 'Jason')\n"
     ]
    }
   ],
   "source": [
    "results = []\n",
    "i, j, k = 0, 0, 0\n",
    "n_classmates = len(classmates)\n",
    "first, second, third = None, None, None\n",
    "while i < n_classmates:\n",
    "    first = classmates[i]\n",
    "    j = 0\n",
    "    while j < n_classmates:\n",
    "        if j != i:\n",
    "            second = classmates[j]\n",
    "            k = 0\n",
    "            while k < n_classmates:\n",
    "                if k != i and k != j:\n",
    "                    third = classmates[k]\n",
    "                    queue = (first, second, third)\n",
    "                    print(perm)\n",
    "                    results.append(perm)\n",
    "                k += 1\n",
    "        j += 1\n",
    "    i += 1"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cbf65050-1ccc-45ba-a07d-046a1b8ccdfb",
   "metadata": {},
   "source": [
    "#### 5. 使用For...in... 循环列出所有排队的可能性"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "ce7ce5e2-9e52-4c90-9b43-bfcb7486f8a2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "('Jason', 'Sophie', 'Tony')\n",
      "('Jason', 'Tony', 'Sophie')\n",
      "('Sophie', 'Jason', 'Tony')\n",
      "('Sophie', 'Tony', 'Jason')\n",
      "('Tony', 'Jason', 'Sophie')\n",
      "('Tony', 'Sophie', 'Jason')\n"
     ]
    }
   ],
   "source": [
    "classmates = [\"Jason\", \"Sophie\", \"Tony\", \"Yunzi\", \"Celine\"]\n",
    "queues = []          # store all the queues generated 保存所有生成的队伍 \n",
    "queue = None         # build q queue to store all the classmates \"Jason\", \"Tony\"\n",
    "                     # 声明一个队伍变量，存放一个可能的排队形式\n",
    "for first in classmates:\n",
    "    for second in classmates:\n",
    "        if second != first:\n",
    "            for third in classmates:\n",
    "                if third != first and third != second:\n",
    "                    queue = (first, second, third)  # find a queue 找到一个队伍\n",
    "                    queues.append(queue)       # append this queue to queues\n",
    "                                               # 把找到的队伍放到队伍列表里\n",
    "                    \n",
    "for queue in queues:\n",
    "    print(queue)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2ddcb450-a014-4d9a-af6c-19214edba81a",
   "metadata": {},
   "source": [
    "#### 6. 使用导入的方法`permutations`来找出所有的排队可能性"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "aaa66f2c-319d-473d-8716-9279cf90e5d8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "('Jason', 'Sophie', 'Tony')\n",
      "('Jason', 'Tony', 'Sophie')\n",
      "('Sophie', 'Jason', 'Tony')\n",
      "('Sophie', 'Tony', 'Jason')\n",
      "('Tony', 'Jason', 'Sophie')\n",
      "('Tony', 'Sophie', 'Jason')\n"
     ]
    }
   ],
   "source": [
    "classmates = [\"Jason\", \"Sophie\", \"Tony\"]\n",
    "from itertools import permutations\n",
    "perms = permutations(classmates)\n",
    "perms = list(perms)\n",
    "i = 0\n",
    "while i < len(perms):\n",
    "    print(perms[i])\n",
    "    i += 1"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "51c28b11-2b6e-4505-a253-9e5d727aa315",
   "metadata": {},
   "source": [
    "### Solution 编程求解"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b1735572-4b5e-45a4-8742-7b56daece173",
   "metadata": {},
   "source": [
    "这里仅使用permutations方法来求解，读者可以自行练习使用其他上文介绍的其他方法来编程解决"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "dad327f9-f515-45e4-9c0c-eb34897b2670",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "('Jason', 'Sophie', 'Tony', 'Yunzi')\n",
      "('Jason', 'Sophie', 'Yunzi', 'Tony')\n",
      "('Jason', 'Tony', 'Sophie', 'Yunzi')\n",
      "('Jason', 'Tony', 'Yunzi', 'Sophie')\n",
      "('Jason', 'Yunzi', 'Sophie', 'Tony')\n",
      "('Jason', 'Yunzi', 'Tony', 'Sophie')\n",
      "('Sophie', 'Jason', 'Tony', 'Yunzi')\n",
      "('Sophie', 'Jason', 'Yunzi', 'Tony')\n",
      "('Sophie', 'Tony', 'Jason', 'Yunzi')\n",
      "('Sophie', 'Tony', 'Yunzi', 'Jason')\n",
      "('Sophie', 'Yunzi', 'Jason', 'Tony')\n",
      "('Sophie', 'Yunzi', 'Tony', 'Jason')\n",
      "('Tony', 'Jason', 'Sophie', 'Yunzi')\n",
      "('Tony', 'Jason', 'Yunzi', 'Sophie')\n",
      "('Tony', 'Sophie', 'Jason', 'Yunzi')\n",
      "('Tony', 'Sophie', 'Yunzi', 'Jason')\n",
      "('Tony', 'Yunzi', 'Jason', 'Sophie')\n",
      "('Tony', 'Yunzi', 'Sophie', 'Jason')\n",
      "('Yunzi', 'Jason', 'Sophie', 'Tony')\n",
      "('Yunzi', 'Jason', 'Tony', 'Sophie')\n",
      "('Yunzi', 'Sophie', 'Jason', 'Tony')\n",
      "('Yunzi', 'Sophie', 'Tony', 'Jason')\n",
      "('Yunzi', 'Tony', 'Jason', 'Sophie')\n",
      "('Yunzi', 'Tony', 'Sophie', 'Jason')\n"
     ]
    }
   ],
   "source": [
    "classmates = [\"Jason\", \"Sophie\", \"Tony\", \"Yunzi\"]\n",
    "from itertools import permutations\n",
    "perms = permutations(classmates)\n",
    "perms = list(perms)\n",
    "i = 0\n",
    "while i < len(perms):\n",
    "    print(perms[i])\n",
    "    i += 1"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a902fd16-fc3c-4c65-8a00-68c7aa577221",
   "metadata": {},
   "source": [
    "### Summary 知识点小结"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2615e63e-ea27-47ba-a12a-a8bcc0af0bbf",
   "metadata": {},
   "source": [
    "1. 学习`for`...`in`...循环，理解它与`while`循环的差别\n",
    "    1. for 比较简单, 不需要设置一个临时变量，也不需要条件表达式；while需要条件表达式（外加一个临时变量）\n",
    "    2. for 针对的是一个list(可迭代对象), while循环可以没有list\n",
    "    3. while 需要内部需要改变变量的值已继续判断是否符合循环条件, for不需要\n",
    "2. 复习列表`list`型变量的使用及其对应的方法\n",
    "3. 初步学习`permutations`方法"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bizarre-assurance",
   "metadata": {},
   "source": [
    "### 计算机小知识"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "92100f08",
   "metadata": {},
   "source": [
    "暂缺"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "digital-consensus",
   "metadata": {
    "heading_collapsed": true
   },
   "source": [
    "### Assignments 作业"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "35e665f6-a1ed-4648-812b-e6bf65a94954",
   "metadata": {},
   "source": [
    "1. 现在有5个小朋友：Jason, Sophie, Tony, Yunzi, Celine, 他们排成一个纵队，那么一共有多少种排队方法？请分别用`while`循环`for`...`in`循环，和`permutations`方法来完成本题。<br>\n",
    "   If now there is 5 chldren instead of 4 (Celine added), how many queues can be formed. Please use `while` loop, `for`...`in` loop, and `permuations` methods to answer this question seperatedly."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "58d518fa-6cfb-4787-972f-42252b4d812e",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Use while loop\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8698af61-f845-4f6d-8b94-928081d7e89b",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Use for...in loop\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "e75cb1a1-6ab7-4c22-9fd2-9015110aada8",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Use method permutations\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0cdb6ce3-9281-4dc3-9069-5a536ecc2306",
   "metadata": {},
   "source": [
    "2. Jason, Sophie, Tony, Yunzi四个小朋友分别来自4个不同的家庭。新学期快要开始了，这几个小朋友准备通过一对一视频连线（一次视频只有2个小朋友参与）的方式相互交流整个暑假的生活。如果让每一个小朋友都有机会了解另一位小朋友的暑假情况，请问一共需要多少次视频连线？ 请编程求解。<br>\n",
    "   Jason, Sophie, Tony and Yunzi come from 4 different families. The new semester is about to begin, and these children are going to communicate with each other through one-to-one video meeting (only 2 children at a time). talking about their activities in the summer holidays. How many one-to-one video meetings are required for all the children to know each other's life in the summer holidays?<br>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a074ae25-3870-404c-99ab-24998d22df8f",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "bb1af42f-8932-420b-af63-4922d056d9f1",
   "metadata": {},
   "source": [
    "3. 用数字\"1,2,3,4\"这4个数字来组成一个**5**位数，其中要求数字1在生成的5位数中出现2次，而其他数字仅出现1次。编程列举出所有符合条件的5位数。<br>\n",
    "\n",
    "   Comose a 5-digit positive integer using the digits: 1,2,3, and 4. Digit 1 should be used twice and other digits should only exist one time. How many 5-digit positive number can be composed?<br>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "36461fb9-8e4e-4633-9cd0-1212e0c8b693",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "e0064f95-258e-4413-a302-c406e1ae04d3",
   "metadata": {},
   "source": [
    "4. [**难，选做**]用数字\"1,2,3,4\"这4个数字来组成一个5位数，其中每一个数至少用到1次，一共可以组成多少个5位数，其中最小的和最大的数分别是什么数？<br>\n",
    "\n",
    "   [**hard, optional**]Comose a 5-digit positive integer using the digits 1,2,3, and 4. Each digit should at least be used once. How many 5-digit positive number can be composed? what is the minimal and maximal integer?<br>\n",
    "   \n",
    "   **提示1 Hint1**: `123 = 1*100 + 2*10 + 3*1`  <br>\n",
    "   \n",
    "   **提示2**: 可以使用一个`list`类型的变量，把所有找到的5位数都存放在这个变量中，这个列表型变量的长度就是所有5位数的个数，列表中最大和最小的元素就分别是能形成的最大的和最小的5位数<br>\n",
    "   \n",
    "   **Hint2**： You can use a `list` variable, put all the integers to it, then the length of this variable is the number of all integers. and minimal and maximal elements are the minimal and maximal value of all composed 5-digit integers.<br>\n",
    "   \n",
    "   **Hint3**: Use `permutations` will be much easier. 使用`permutations`方法会比较容易。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0c4dfc7c-106c-4484-a6b9-d0a9eb65c504",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9b923b06-b6a8-4108-b9eb-f501c7759df6",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
