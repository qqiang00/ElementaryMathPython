{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "relative-location",
   "metadata": {},
   "source": [
    "## 第12讲 找出所有能整除120的整数"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "digital-consensus",
   "metadata": {
    "heading_collapsed": true
   },
   "source": [
    "### Assignments 作业"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "af3779fd-73fd-485e-b9af-81800f214694",
   "metadata": {
    "hidden": true
   },
   "source": [
    "1. create an empty list with the variable name `my_friends`, use `append` method to add at least 5 of your friend names to this list, then use the method `remove` to remove one or several of your friend names from the list. Each time after you add or remove a friend name, print out the whole `my_friends` list and its length.  \n",
    "\n",
    "   创建一个空的列表，变量名设为`my_friends`，使用`append`方法往这个列表里添加至少5个你的朋友名字，随后再使用`remove`方法从中移除一个或多个朋友名字。每一次当你使用`append`或`remove`方法后，都将整个`my_friends`列表的内容以及列表的长度打印出来。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "17eb3f0c-0561-4604-8eec-26d084f611c7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[]\n",
      "['Jin Dongjun']\n",
      "['Jin Dongjun', 'Song Kang']\n",
      "['Jin Dongjun', 'Song Kang', 'Zhang Wei']\n",
      "['Jin Dongjun', 'Song Kang', 'Zhang Wei', 'Bai Lin']\n",
      "['Jin Dongjun', 'Song Kang', 'Zhang Wei', 'Bai Lin', 'Sha Sha']\n",
      "['Jin Dongjun', 'Song Kang', 'Zhang Wei', 'Bai Lin']\n"
     ]
    }
   ],
   "source": [
    "my_friends = []\n",
    "print(my_friends)\n",
    "my_friends.append(\"Jin Dongjun\")\n",
    "print(my_friends)\n",
    "my_friends.append(\"Song Kang\")\n",
    "print(my_friends)\n",
    "my_friends.append(\"Zhang Wei\")\n",
    "print(my_friends)\n",
    "my_friends.append(\"Bai Lin\")\n",
    "print(my_friends)\n",
    "my_friends.append(\"Sha Sha\")\n",
    "print(my_friends)\n",
    "my_friends.remove(\"Sha Sha\")\n",
    "print(my_friends)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7460a241-af19-4d7a-858f-c2e693b1722b",
   "metadata": {},
   "source": [
    "2. Write a program to find all factors of 144 and 385, put their factors in to two lists, one is for 144, and the other is for 385. Print out the two lists and also tell which integer has more factors.  \n",
    "\n",
    "   编写程序分别查找整数144和385各自的因数，把他们分别放到两个不同的列表中，编程输出这两个列表并输出谁的因数数量多"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "32fb5105-b6a8-42ab-871a-7541d135e99f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "144 的因数是 [1, 2, 3, 4, 6, 8, 9, 12, 16, 18, 24, 36, 48, 72, 144], 个数是 15\n",
      "385 的因数是 [1, 5, 7, 11, 35, 55, 77, 385], 个数是 8\n",
      "144 的因数个数多于385的因数个数\n"
     ]
    }
   ],
   "source": [
    "num1, num2 = 144, 385\n",
    "factors1, factors2 = [], []\n",
    "\n",
    "## begin added codes\n",
    "i = 1\n",
    "max_num = num1 if num1 >= num2 else num2\n",
    "while i <= max_num:\n",
    "    if num1 % i == 0:\n",
    "        factors1.append(i)\n",
    "    if num2 % i == 0:\n",
    "        factors2.append(i)\n",
    "    i += 1\n",
    "## end added codes\n",
    "\n",
    "print(\"{} 的因数是 {}, 个数是 {}\".format(num1, factors1, len(factors1)))\n",
    "print(\"{} 的因数是 {}, 个数是 {}\".format(num2, factors2, len(factors2)))\n",
    "if len(factors1) > len(factors2):\n",
    "    print(\"{} 的因数个数多于{}的因数个数\".format(num1, num2))\n",
    "else:\n",
    "    print(\"{} 的因数个数少于或等于{}的因数个数\".format(num1, num2))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f97f26a0-e13f-48ba-9135-9ab110695803",
   "metadata": {},
   "source": [
    "3. Following the previous question. After you have two lists for the factors of 144 and 385, Write a program to check if these two integers shared some factors, If yes, print out the shared factor(s).\n",
    "   \n",
    "   续前一题。 当你找到144和385的所有因数后，编写程序检查这两个数除了整数1以外还有没有共同的因数"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "14628f53-382c-481a-9d59-713ed911c700",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0 shared factors: []\n"
     ]
    }
   ],
   "source": [
    "factors_for_144 = [1, 2, 3, 4, 6, 8, 9, 12, 16, 18, 24, 36, 48, 72, 144]\n",
    "factors_for_385 = [1, 5, 7, 11, 35, 55, 77, 385]\n",
    "\n",
    "factors_shared = []\n",
    "i = 0\n",
    "while i < len(factors_for_144):\n",
    "    factor_of_144 = factors_for_144[i]\n",
    "    if factor_of_144 in factors_for_385 and factor_of_144 > 1:\n",
    "        factors_shared.append(factor_of_144)\n",
    "        \n",
    "    i += 1\n",
    "    \n",
    "print(\"{} shared factors: {}\".format(len(factors_shared), factors_shared))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d13098be-4c79-4376-8afa-35a4bc7c8083",
   "metadata": {},
   "source": [
    "4. if an integer only have two factors(1 and the integer itself), this integer is a Prime number; Otherwise, it is a Composite number. Write a program to find all the prime and composite numbers between 2 and 100 (both included). Use two lists to store all these prime and composite numbers. Finally, print out the two lists.\n",
    "\n",
    "   \n",
    "   如果一个整数的因数个数为2个（整数1和它自己），那么这个整数为“质数”，否则这个数则为合数。编写程序找出从2-100这100个连续整数中哪些是质数，哪些是合数，分别用两个列表来存储质数和合数，并最后将其打印出来。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "7d152559-9abe-4b74-941d-f4aff3badd40",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Prime numbers: [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n",
      "Composite numbers: [4, 6, 8, 9, 10, 12, 14, 15, 16, 18, 20, 21, 22, 24, 25, 26, 27, 28, 30, 32, 33, 34, 35, 36, 38, 39, 40, 42, 44, 45, 46, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 60, 62, 63, 64, 65, 66, 68, 69, 70, 72, 74, 75, 76, 77, 78, 80, 81, 82, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100]\n"
     ]
    }
   ],
   "source": [
    "num_start, num_end = 2, 100\n",
    "list_prime = []\n",
    "list_composite = []\n",
    "\n",
    "num = num_start\n",
    "while num <= num_end:\n",
    "    factors_for_num = []\n",
    "    i = 1\n",
    "    while i <= num:\n",
    "        if num % i == 0:\n",
    "            factors_for_num.append(i)\n",
    "            \n",
    "        i += 1\n",
    "    \n",
    "    if len(factors_for_num) == 2:\n",
    "        list_prime.append(num)\n",
    "    else:\n",
    "        list_composite.append(num)\n",
    "        \n",
    "    num += 1\n",
    "\n",
    "print(\"Prime numbers: {}\".format(list_prime))\n",
    "print(\"Composite numbers: {}\".format(list_composite))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f2f0289b-1790-4e59-9ff3-b4a3da7743ce",
   "metadata": {},
   "source": [
    "5. The following list `list_a` has 2 elements, both of which are integer `1`. Please write a program to add 20 more new elements to the end of `list_a` step by step while respecting the following rule: **every time when you add a new element to the end of the list, its value is the sum of the values of the last two elements in the list.** Print out the final list when you finish adding elements. The final list you get should have 22 elements with `17711` as its last element. Are your familiar with the first 10 element in this list?\n",
    "\n",
    "   下面名为`list_a`的列表一开始有2个元素且值均为`1`。请编写程序往这个列表的末端逐次再添加20个新元素，**要求每次新添加的元素值是当时列表的最末两位元素的值的和。** 添加完毕后打印输出这个列表。你最后得到的列表应该具有22个元素，且最后一个元素的值为`17711`。你熟悉这个列表的前10个元素吗？"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "78b05128-b89d-4a5b-bcde-45bcd833d1c7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "list a: [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711]\n"
     ]
    }
   ],
   "source": [
    "list_a = [1, 1]\n",
    "n_element_added = 0\n",
    "n_element_required = 20\n",
    "\n",
    "while n_element_added < n_element_required:\n",
    "    element = list_a[-1] + list_a[-2]\n",
    "    list_a.append(element)\n",
    "    n_element_added += 1\n",
    "\n",
    "if len(list_a) != 22 or list_a[-1] != 17711:\n",
    "    print(\"your answer is not correct\")\n",
    "else:\n",
    "    print(\"list a: {}\".format(list_a))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c2306f66-a35b-43ef-b665-2fd8ac3a437c",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
