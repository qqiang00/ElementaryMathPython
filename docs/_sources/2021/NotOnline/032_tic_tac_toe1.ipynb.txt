{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "6674527b-2570-406a-a335-af74e15846b9",
   "metadata": {
    "tags": []
   },
   "source": [
    "## 第16讲 综合实践：设计TicTacToe游戏（一）\n",
    "\n",
    "Lecture 16. Project: Design a Tic Tac Toe Game (Part1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9594c99c-95fb-406d-bae4-c2c0043c8f1c",
   "metadata": {
    "tags": []
   },
   "source": [
    "### Problem 问题描述\n",
    "\n",
    "Observe or play a Tic Tac Toe game, answer the following questions: 观察或者亲自玩一盘TicTacToe游戏，回答下面的问题：\n",
    "\n",
    "1. Describe the how the game is being played 描述这个游戏是怎么玩的？\n",
    "2. How can we mathematically describe the whole game:从数学的角度来描述这个游戏\n",
    "   1. game board 游戏的棋盘\n",
    "   2. player's action in each round 玩家在每一个回合中的动作\n",
    "   3. check the end of the game 判断游戏结束的条件\n",
    "3. try to describe the game board by programming 通过编程来描述棋盘"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3902b97c-3e50-4ca6-848e-d82e03657fdc",
   "metadata": {},
   "source": [
    "### Math Background 数学背景"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "08b2fea4-9656-42c1-9908-87a0b5f7d1f8",
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "invalid syntax (3873771269.py, line 1)",
     "output_type": "error",
     "traceback": [
      "\u001b[1;36m  Input \u001b[1;32mIn [17]\u001b[1;36m\u001b[0m\n\u001b[1;33m    Symbol 标记\u001b[0m\n\u001b[1;37m           ^\u001b[0m\n\u001b[1;31mSyntaxError\u001b[0m\u001b[1;31m:\u001b[0m invalid syntax\n"
     ]
    }
   ],
   "source": [
    "Symbol 标记\n",
    "Column 一列 |\n",
    "Row 一行 ----\n",
    "Diagonal 对角线 \\ /"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "45b13c1b-d55b-4084-8223-3592a6b6865a",
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "invalid syntax (3910797940.py, line 1)",
     "output_type": "error",
     "traceback": [
      "\u001b[1;36m  Input \u001b[1;32mIn [18]\u001b[1;36m\u001b[0m\n\u001b[1;33m    - x -\u001b[0m\n\u001b[1;37m         ^\u001b[0m\n\u001b[1;31mSyntaxError\u001b[0m\u001b[1;31m:\u001b[0m invalid syntax\n"
     ]
    }
   ],
   "source": [
    "- x -\n",
    "o - -\n",
    "o - x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "748c575e-78a9-49e9-95ce-6d5695b9b955",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "玩家(x)的指令： 1\n"
     ]
    }
   ],
   "source": [
    "c = input(\"玩家(x)的指令：\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a2a50ab9-4af6-4928-8640-b24a4d28b369",
   "metadata": {},
   "outputs": [],
   "source": [
    "x x -\n",
    "o - -\n",
    "o - x"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8b6a264d-5e40-485b-8e6d-3fae5040f2bb",
   "metadata": {
    "tags": []
   },
   "source": [
    "### Prerequisites 预备知识"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "da7bda88-91fd-450f-b517-9771b0cd2527",
   "metadata": {},
   "outputs": [],
   "source": [
    "1. 3*3 square, 9 positions, each position has three status: '-', 'x', 'o'; \n",
    "2. 2 players\n",
    "3. char for first drop: 'x' or 'o'\n",
    "4. players\n",
    "5. player who first make a line wins."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "06f01aef-980d-4c54-a123-bdccaf6e6889",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "fe895929-c545-45e8-a779-a1108c1229e3",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "925507bf-b5ee-4df6-a93a-2d581a8a4a8c",
   "metadata": {
    "tags": []
   },
   "source": [
    "### Solution 编程求解"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "37e0bd6c-0b64-4a96-9734-a8b9b583d4e6",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Start\n",
    "#  -  -  -\n",
    "#  -  -  -\n",
    "#  -  -  -"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "e8775f88-66b6-4f24-ad2e-543b42426e0c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['-', '-', '-', '-', '-', '-', '-', '-', '-']\n"
     ]
    }
   ],
   "source": [
    "board = ['-']*9\n",
    "print(board)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "d2b2fb69-92e6-4ecb-a17e-799fe95ef75a",
   "metadata": {},
   "outputs": [],
   "source": [
    "board = ['-', 'x', '-', 'o', 'x', '-', '-', '-', '-']\n",
    "#display_board(board)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "67bc8e39-e646-4f5a-b16a-5f9fea8c638f",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "def display_board(board):\n",
    "    # print 3 rows * 3 columns\n",
    "    \"\"\"\n",
    "      -  -  -\n",
    "      -  -  -\n",
    "      -  -  -\n",
    "    \"\"\"\n",
    "    print(\"===  board status ===\")\n",
    "    for i, pos_status in enumerate(board):\n",
    "        print(\"{}\".format(pos_status), end=\" \")\n",
    "        if i % 3 == 2:\n",
    "            print() \n",
    "    print()\n",
    "    return   \n",
    "\n",
    "def get_input(board, player):\n",
    "    is_input_valid = False\n",
    "    while not is_input_valid:\n",
    "        try:\n",
    "            pos = int(input(\"{}'s input:\".format(player)))\n",
    "        except:\n",
    "            pass\n",
    "        if pos >= 0 and pos < 9:\n",
    "            if board[pos] == '-':\n",
    "                is_input_valid = True\n",
    "                return pos\n",
    "        print(\"Not valid, input again.\", end=\" \")\n",
    "        \n",
    "def is_somebody_win(board):\n",
    "    i = 0\n",
    "    while i < 3:\n",
    "        if ((board[3*i] == board[3*i+1] == board[3*i+2]) and board[3*i] != '-'):\n",
    "            print(\"row {} lines up\".format(i))\n",
    "            return True        \n",
    "        i += 1\n",
    "    i = 0\n",
    "    while i < 3:\n",
    "        if ((board[i] == board[i+3] == board[i+6]) and board[i] != '-'):\n",
    "            print(\"col {} lines up\".format(i))\n",
    "            return True        \n",
    "        i += 1\n",
    "    \n",
    "    if ((board[0] == board[4] == board[8]) and board[0] != '-') or \\\n",
    "       ((board[2] == board[4] == board[6]) and board[2] != '-'):\n",
    "        print(\"\\ or / lines up\")\n",
    "        return True        \n",
    "    \n",
    "    return False\n",
    "\n",
    "\n",
    "def is_board_full(board):\n",
    "    return '-' not in board"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "52801bd7-1553-4097-afd8-00eb8450f3e1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Welcome to Game 'Tic Tac Toe'\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Player1 Name: Yunzi\n",
      "Player2 Name: Cynthia\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Yunzi will have 'x'\n",
      "===  board status ===\n",
      "- - - \n",
      "- - - \n",
      "- - - \n",
      "\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Yunzi's input: 8\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "===  board status ===\n",
      "- - - \n",
      "- - - \n",
      "- - x \n",
      "\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Cynthia's input: 4\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "===  board status ===\n",
      "- - - \n",
      "- o - \n",
      "- - x \n",
      "\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Yunzi's input: 5\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "===  board status ===\n",
      "- - - \n",
      "- o x \n",
      "- - x \n",
      "\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Cynthia's input: 2\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "===  board status ===\n",
      "- - o \n",
      "- o x \n",
      "- - x \n",
      "\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Yunzi's input: 6\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "===  board status ===\n",
      "- - o \n",
      "- o x \n",
      "x - x \n",
      "\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Cynthia's input: 7\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "===  board status ===\n",
      "- - o \n",
      "- o x \n",
      "x o x \n",
      "\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Yunzi's input: 0\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "===  board status ===\n",
      "x - o \n",
      "- o x \n",
      "x o x \n",
      "\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Cynthia's input: 1\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "===  board status ===\n",
      "x o o \n",
      "- o x \n",
      "x o x \n",
      "\n",
      "col 1 lines up\n",
      "Cynthia win\n"
     ]
    }
   ],
   "source": [
    "board = ['-']*9\n",
    "#player1, player2 = \"Qiang\", \"Celine\" # player1 always first\n",
    "players = []\n",
    "chars = ['x', 'o', '-']\n",
    "print(\"Welcome to Game 'Tic Tac Toe'\")\n",
    "players.append(input(\"Player1 Name:\"))\n",
    "players.append(input(\"Player2 Name:\"))\n",
    "print(\"{} will have 'x'\".format(players[0]))\n",
    "board = ['-']*9\n",
    "display_board(board)\n",
    "is_game_over = False\n",
    "player_index = 0\n",
    "winner = None\n",
    "while not is_game_over:\n",
    "    cur_player = players[player_index]\n",
    "    pos_p1 = get_input(board, cur_player)\n",
    "    board[pos_p1] = chars[player_index]\n",
    "    display_board(board)\n",
    "    if is_somebody_win(board):\n",
    "        winner = cur_player\n",
    "        is_game_over = True\n",
    "    elif is_board_full(board):\n",
    "        is_game_over = True\n",
    "    else:\n",
    "        player_index = 1 - player_index\n",
    "\n",
    "if winner is not None:\n",
    "    print(\"{} win\".format(cur_player))    \n",
    "else:\n",
    "    print(\"TIE\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "fc2a0632-87f9-4cb4-9406-a6025e48fae3",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e03718cb-48c0-49f4-9620-5e21126b0cf9",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9bcf0339-9658-420e-a0c1-28d662dfced6",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "4c24c0c5-ed7b-4513-92b0-994bca1075ba",
   "metadata": {},
   "outputs": [],
   "source": [
    "from turtle import *\n",
    "import turtle\n",
    "  \n",
    "def func(i,j):\n",
    "     \n",
    "    turtle.right(90)\n",
    "    turtle.forward(150)\n",
    "  \n",
    "turtle.speed(6)\n",
    "turtle.forward(100) \n",
    "turtle.onclick(func)\n",
    "turtle.done()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "f8106855-49fb-4ea0-b64e-813fa34579d5",
   "metadata": {},
   "outputs": [],
   "source": [
    "from turtle import *\n",
    "\n",
    "import turtle\n",
    "  \n",
    "\n",
    "ws = turtle.Screen()\n",
    "  \n",
    "\n",
    "def func(i, j):\n",
    "  goto(i, j)\n",
    "  write(str(i)+\",\"+str(j))\n",
    "  \n",
    "\n",
    "ws.onclick(func)\n",
    "ws.mainloop()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "3d6805a5-025a-478e-91be-e8072cc384ba",
   "metadata": {},
   "outputs": [],
   "source": [
    "from turtle import setup, reset, pu, pd, bye, left, right, fd, bk, screensize\n",
    "from turtle import goto, seth, write, ht, st, home, dot, pen, speed\n",
    "from qianglib import prepare_paper, draw_grid, mark, lines, line, polygon, text"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "e399e9eb-4e32-48e1-8e19-e927e3c200d3",
   "metadata": {},
   "outputs": [
    {
     "ename": "Terminator",
     "evalue": "",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mTerminator\u001b[0m                                Traceback (most recent call last)",
      "Input \u001b[1;32mIn [8]\u001b[0m, in \u001b[0;36m<cell line: 2>\u001b[1;34m()\u001b[0m\n\u001b[0;32m      1\u001b[0m width, height \u001b[38;5;241m=\u001b[39m \u001b[38;5;241m500\u001b[39m, \u001b[38;5;241m600\u001b[39m\n\u001b[1;32m----> 2\u001b[0m \u001b[43msetup\u001b[49m\u001b[43m(\u001b[49m\u001b[43mwidth\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mheight\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m0\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m0\u001b[39;49m\u001b[43m)\u001b[49m\n",
      "File \u001b[1;32m<string>:5\u001b[0m, in \u001b[0;36msetup\u001b[1;34m(width, height, startx, starty)\u001b[0m\n",
      "\u001b[1;31mTerminator\u001b[0m: "
     ]
    }
   ],
   "source": [
    "width, height = 500, 600\n",
    "setup(width, height, 0, 0)\n",
    "#prepare_paper(width, height, scale=100, min_x=0, min_y=0, max_y=3, max_x=3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d056a638-a84f-46e1-9063-a8fbb4c28320",
   "metadata": {},
   "outputs": [],
   "source": [
    "def draw_grid(center=(0, 0), width=100, line_width=3, color=\"black\"):\n",
    "    line((-1.5*width, -0.5*width), (1.5*width, -0.5*width), line_width=line_width, color=color)\n",
    "    line((-1.5*width, 0.5*width), (1.5*width, 0.5*width), line_width=line_width, color=color)\n",
    "    line((-0.5*width, -1.5*width), (-0.5*width, 1.5*width), line_width=line_width, color=color)\n",
    "    line((0.5*width, -1.5*width), (0.5*width, 1.5*width), line_width=line_width, color=color)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "fc8be5f3-b915-48ca-a502-3bb664657c16",
   "metadata": {},
   "outputs": [],
   "source": [
    "import turtle\n",
    "ws = turtle.Screen()\n",
    "def func(i, j):\n",
    "    return\n",
    "    goto(i, j)\n",
    "    write(str(i)+\",\"+str(j))\n",
    "\n",
    "draw_grid()\n",
    "ws.onclick(func)\n",
    "ws.mainloop()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "90dbc6a4-a57b-4719-9fbb-3b96900cfbb2",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "052eeee5-ecc5-4a57-8a56-292a9c23af99",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
