{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "52b8e2ff-0de4-442c-89ee-808f25031199",
   "metadata": {},
   "outputs": [],
   "source": [
    "times = [\"present\", \"future proche\", \"future simple\", \"passé composé\"]\n",
    "persons = [\"je\", \"tu\", \"il\", \"elle\", \"on\", \"nous\", \"vous\", \"ils\", \"elles\"]\n",
    "conditions = []\n",
    "\n",
    "irregular_verbs = []\n",
    "suffixes = [\"er\", \"ir\", \"oir\", \"re\"]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "63fb5cc2-ae4f-4592-aa3f-57b861483c09",
   "metadata": {},
   "source": [
    "1. irregular  -> for irregular\n",
    "2. regular    -> regle\n",
    "     ending,   time,       person,    remove,    add?    verb auxilaire\n",
    "       er      present      je          er         e\n",
    "                            tu          er         es\n",
    "                            il/elle/on  er         e\n",
    "                            nous        er         ons\n",
    "        il                    vous        er         ez\n",
    "                            ils/elles   er         ent\n",
    "               imparfait    je          er         ais\n",
    "                            tu          er         ais\n",
    "                            il/elle/on  er         ait\n",
    "                            nous        er         ions\n",
    "                            vous        er         iez\n",
    "                            ils/elles   er         aient\n",
    "               future simp. je          er         erai\n",
    "       ilil                     tu          er         eras\n",
    "                            il/elle/on  er         era\n",
    "                            nous        er         erons\n",
    "                            vous        er         erez\n",
    "                            ils/elles   er         eront"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6d83cf13-18b1-4bc9-89e7-6169b79d42e9",
   "metadata": {},
   "outputs": [],
   "source": [
    "rules = {}   # ending, time, person           remove         add"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "0e6c0fd2-db19-4631-afe4-aef178e42e9e",
   "metadata": {},
   "outputs": [],
   "source": [
    "# ending \"er\"\n",
    "\n",
    "# for verbs ending with \"er\" under present \n",
    "rules[\"er_present_je\"] = [2, \"e\"]\n",
    "rules[\"er_present_tu\"] = [2, \"es\"]\n",
    "rules[\"er_present_il\"] = [2, \"e\"] # elle, on\n",
    "rules[\"er_present_nous\"] = [2, \"ons\"]\n",
    "rules[\"er_present_vous\"] = [2, \"ez\"]\n",
    "rules[\"er_present_ils\"] = [2, \"ent\"]\n",
    "# for verbs ending with \"er\" under \"imparfait\"\n",
    "\n",
    "\n",
    "# for verbs ending with \"er\" under \"futur simple\"\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8c8b7577-a9fd-4272-926f-9eb673aa1232",
   "metadata": {},
   "outputs": [],
   "source": [
    "# ending oir"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "66b4891a-48f3-4d75-a6fd-1e1d1375e2d1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'er_present_je': [2, 'e'], 'er_present_tu': [2, 'es'], 'er_present_il': [2, 'e'], 'er_present_nous': [2, 'ons'], 'er_present_vous': [2, 'ez'], 'er_present_ils': [2, 'ent']}\n"
     ]
    }
   ],
   "source": [
    "print(rules)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "0e360c88-7d4e-4346-8559-6bc9f1ae4018",
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_ending(verb):\n",
    "    ending = \"er\"\n",
    "    #TODO modify ending\n",
    "    return ending\n",
    "\n",
    "def get_person_key(person):\n",
    "    if person in [\"il\", \"elle\", \"on\"]:\n",
    "        return \"il\"\n",
    "    if person in [\"ils\", \"elles\"]:\n",
    "        return \"ils\"\n",
    "    return person\n",
    "\n",
    "def conjugaison_regular(verb):\n",
    "    ending = get_ending(verb)\n",
    "    for time in times:\n",
    "        print(\"  {}  \".format(time))\n",
    "        for person in persons:\n",
    "            person_key = get_person_key(person)\n",
    "            key = ending+\"_\"+time+\"_\"+person_key\n",
    "            rule = rules[key]\n",
    "            verb_conj = verb[:-1*rule[0]]   # remove suffix\n",
    "            verb_conj = verb_conj + rule[1] # add extra\n",
    "            print(person + \" \" + verb_conj) # connect person and verbe already changed.\n",
    "        print()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "823b6614-a1ec-4e26-8e11-5ef7b5c686d5",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "  present  \n",
      "je visite\n",
      "tu visites\n",
      "il visite\n",
      "elle visite\n",
      "on visite\n",
      "nous visitons\n",
      "vous visitez\n",
      "ils visitent\n",
      "elles visitent\n",
      "\n",
      "  future proche  \n"
     ]
    },
    {
     "ename": "KeyError",
     "evalue": "'er_future proche_je'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-37-1738fde0fd0c>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mconjugaison_regular\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"visiter\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;32m<ipython-input-36-35e835a86fe9>\u001b[0m in \u001b[0;36mconjugaison_regular\u001b[0;34m(verb)\u001b[0m\n\u001b[1;32m     16\u001b[0m             \u001b[0mperson_key\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mget_person_key\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mperson\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     17\u001b[0m             \u001b[0mkey\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mending\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0;34m\"_\"\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0mtime\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0;34m\"_\"\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0mperson_key\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 18\u001b[0;31m             \u001b[0mrule\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mrules\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     19\u001b[0m             \u001b[0mverb_conj\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mverb\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0mrule\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m   \u001b[0;31m# remove suffix\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     20\u001b[0m             \u001b[0mverb_conj\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mverb_conj\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mrule\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;31m# add extra\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mKeyError\u001b[0m: 'er_future proche_je'"
     ]
    }
   ],
   "source": [
    "conjugaison_regular(\"visiter\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "75dc0324-d0d9-43d5-91c0-8a5fb299c01c",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
