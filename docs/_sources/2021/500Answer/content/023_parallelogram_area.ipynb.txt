{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "right-notion",
   "metadata": {},
   "source": [
    "## 第23讲 平行四边形和它的面积"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "infinite-leonard",
   "metadata": {
    "heading_collapsed": true
   },
   "source": [
    "### Assignments 作业"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "relevant-essay",
   "metadata": {},
   "outputs": [],
   "source": [
    "from turtle import setup, reset, pu, pd, bye, left, right, fd, bk, screensize\n",
    "from turtle import goto, seth, write, ht, st, home, dot, pen, speed\n",
    "from qianglib import prepare_paper, draw_grid, mark, lines, line, text\n",
    "from qianglib import polygon\n",
    "#from qianglib import generate_parallelogram, generate_rectangle, get_center, add_v\n",
    "#from qianglib import rectangle"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "patent-clearance",
   "metadata": {},
   "outputs": [],
   "source": [
    "width, height = 800, 600\n",
    "setup(width, height, 0, 0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "biblical-garbage",
   "metadata": {},
   "outputs": [],
   "source": [
    "prepare_paper(width, height, scale=20, min_x=0, min_y=0, max_y=25)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "apparent-berkeley",
   "metadata": {},
   "source": [
    "1. According to the definition of parallelogram, declare and implement a method to tell whether a list variable with 4 coordinate valus of points represents a parallelogram? Give the method a name and carefully design its parameters and return values. 根据平行四边形的定义，编写一个方法判断：一个拥有四个点坐标信息元素的列表变量是否代表着一个平行四边形。你可以自己设定方法名，在编写这个方法前认真思考这个方法的参数和返回值如何设计才比较好。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "norman-outdoors",
   "metadata": {},
   "outputs": [],
   "source": [
    "def is_parallelogram(points):\n",
    "    result = None\n",
    "    if len(points) != 4: # it needs to have 4 points no more or less/can't be\n",
    "        result = False\n",
    "    else:                # could be\n",
    "        p0, p1, p2, p3 = points\n",
    "        \n",
    "        dx1 = p1[0] - p0[0]     \n",
    "        dy1 = p1[1] - p0[1]\n",
    "        \n",
    "        dx2 = p2[0] - p1[0]\n",
    "        dy2 = p2[1] - p1[1]\n",
    "        \n",
    "        dx3 = p2[0] - p3[0]\n",
    "        dy3 = p2[1] - p3[1]\n",
    "        \n",
    "        dx4 = p3[0] - p0[0]\n",
    "        dy4 = p3[1] - p0[1]\n",
    "        \n",
    "        if dx1 == dx3 and dy1 == dy3 and dx2 == dx4 and dy2 == dy4:\n",
    "            result = True\n",
    "        else:\n",
    "            result = False\n",
    "                        \n",
    "    return result          "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "revolutionary-fusion",
   "metadata": {},
   "source": [
    "2. Below are 6 lists, each contains the coordinates of four points and may represent a parallelogram. For each list: use the `polygon` method provided in `qianglib` to draw it. Then, call the method you implemented in the previous quantion and observe whether your method can correctly determine whether the drawn figure is a parallelogram or not.\n",
    "如下给出了6行由四个点的坐标组成的列表，每一行都有可能代表着一个平行四边形。对于每一行的列表数据：用`qianglib`库里的`polygon`方法绘制出它代表的图形。随后，调用你上一步实现的方法，观察你的方法能否正确判断绘制出的图形是否是一个平行四边形。\n",
    "   - [(5, 9), (10, 9), (13, 14), (8, 14)]\n",
    "   - [(15, 9), (20, 9), (23, 14), (20, 14)]\n",
    "   - [(27, 9), (32, 10), (32, 14), (27, 13)]\n",
    "   - [(5, 1), (10, 2), (10, 7), (5, 5)]\n",
    "   - [(15, 4), (18, 1), (21, 4), (18, 7)]\n",
    "   - [(27, 1), (32, 1), (32, 7), (27, 7)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "insured-attempt",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "True\n",
      "False\n",
      "True\n",
      "False\n",
      "True\n",
      "True\n"
     ]
    }
   ],
   "source": [
    "shape1 = [(5, 9), (10, 9), (13, 14), (8, 14)]\n",
    "shape2 = [(15, 9), (20, 9), (23, 14), (20, 14)]\n",
    "shape3 = [(27, 9), (32, 10), (32, 14), (27, 13)]\n",
    "shape4 = [(5, 1), (10, 2), (10, 7), (5, 5)]\n",
    "shape5 = [(15, 4), (18, 1), (21, 4), (18, 7)]\n",
    "shape6 = [(27, 1), (32, 1), (32, 7), (27, 7)]\n",
    "shapes = [shape1, shape2, shape3, shape4, shape5, shape6]\n",
    "for shape in shapes:\n",
    "    polygon(shape, color=\"black\")\n",
    "    print(is_parallelogram(shape))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "present-netherlands",
   "metadata": {},
   "source": [
    "3. Assume that a list variable represents a parallelogram (only consider the case where at least one side of the parallelogram is parallel to either x or y axis), Can you figure out how to get the base and height of this parallelogram? Write a method to solve this problem.假设一个列表型变量表示一个平行四边形（仅考虑平行四边形一条边平行于坐标轴的情况），如何根据给定的四个顶点的坐标来得到这个平行四边形的一组底和高的大小？编写一个方法来求解这个问题。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "southeast-spring",
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_base_height(parallelogram):\n",
    "    p0, p1, p2, p3 = parallelogram\n",
    "    base, height = 0, 0\n",
    "    \n",
    "    dx1 = p1[0] - p0[0]     \n",
    "    dy1 = p1[1] - p0[1]\n",
    "    \n",
    "    dx2 = p2[0] - p1[0]\n",
    "    dy2 = p2[1] - p1[1]\n",
    "    \n",
    "    #dx3 = p2[0] - p3[0]\n",
    "    #dy3 = p2[1] - p3[1]\n",
    "    \n",
    "    #dx4 = p3[0] - p0[0]\n",
    "    #dy4 = p3[1] - p0[1]\n",
    "    \n",
    "    if dx1 == 0:\n",
    "        base = dy1\n",
    "        height = p1[0] - p2[0]\n",
    "    \n",
    "    elif dy1 == 0:\n",
    "        base = dx1\n",
    "        height = p1[1] - p2[1]\n",
    "    \n",
    "    elif dx2 == 0:\n",
    "        base = dy2\n",
    "        height = p2[0] - p3[0]\n",
    "    \n",
    "    elif dy2 == 0:\n",
    "        base = dx2\n",
    "        height = p2[1] - p3[1]\n",
    "        \n",
    "    else:\n",
    "        pass\n",
    "    \n",
    "    height = abs(height)\n",
    "    base = abs(base)\n",
    "    \n",
    "    return base, height "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "british-security",
   "metadata": {},
   "source": [
    "4. Use the method written in the previous question to calculate the base and height of each parallelogram filtered from the question 2; calculate the area of each quadrilateral and compare it with the area obtained by manually counting introduced in the class. 用上一题编写的方法来计算从第2题中筛选出来的每一个平行四边形的一组底和高，然后计算这个四边形的面积，和用课堂上介绍的数格子的方法得到的结果进行比较。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "southern-colombia",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "True 5 5 25\n",
      "True 4 5 20\n",
      "True 0 0 0\n",
      "True 5 6 30\n"
     ]
    }
   ],
   "source": [
    "parallelograms = [shape1, shape3, shape5, shape6]\n",
    "\n",
    "for p in parallelograms:\n",
    "    verify_p = is_parallelogram(p)\n",
    "    \n",
    "    base, height = get_base_height(p)\n",
    "    area = base * height\n",
    "    print(verify_p, base, height, area)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
