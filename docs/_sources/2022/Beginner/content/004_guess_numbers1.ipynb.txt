{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "relative-location",
   "metadata": {},
   "source": [
    "## 第04讲 猜数字（一）\n",
    "Lecture04 Guess Numbers(Part 1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d12f05dd",
   "metadata": {},
   "source": [
    "### Problem 问题描述"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c7cd1f0b-8266-49f3-a77e-806bec2c40ce",
   "metadata": {},
   "source": [
    "Write a program to play a number guessing game with the computer. Here is how the game works: 编写一个程序和计算机玩一个猜数字的游戏。具体流程如下：\n",
    "\n",
    "1. Let the computer **randomly** generate an integer in the range of 0-9 (both included), this number is known only by the computer itself; 让计算机**随机**生成一个范围在0-9之间的整数（包括这两个整数），这个数字只有计算机自己知道；\n",
    "\n",
    "2. As the person who write and run this program, you try to guess what the number is and tell the computer the number by input from keyboard;作为编写并运行这个程序的你尝试着猜一猜这个数字是什么，把你猜的数字通过键盘输入告诉计算机；\n",
    "\n",
    "3. After the computer receives your input, it compares it with the number it generates. If two values are equal, the computer outputs: \"Congratulations, you are right!\"; If two values are not equal, you lose the game, and the computer outputs: \"Sorry, you failed to make it out.\" 计算机接收到你的输入后，把它和自己生成的数进行比较，如果一样，计算机输出：“恭喜你，你猜对了!”；如果不一样，计算机输出：“真可惜，你没有猜对。”"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "animated-batch",
   "metadata": {},
   "source": [
    "### Math Background 数学背景\n",
    "\n",
    "1. 比较大小，比较运算符: $\\gt$, $\\lt$, $=$, $\\ge$, $\\le$\n",
    "2. 平均数的概念"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "sorted-furniture",
   "metadata": {
    "heading_collapsed": true
   },
   "source": [
    "### Prerequisites 预备知识\n",
    "#### 1. 如何让计算机生成一个在一定范围内的随机数，模块（仓库）的概念，模块和方法（命令）的关系\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "d9f9e5d0-5084-4b74-8f59-315aa8b8d1ca",
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'variable_a' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-2-3f13b4e447b4>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mvariable_a\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m: name 'variable_a' is not defined"
     ]
    }
   ],
   "source": [
    "variable_a"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "07f8bd1a-efcb-4cca-a69b-7f8a9314dee9",
   "metadata": {},
   "source": [
    "一对圆括号`()`前面的名字一般表示的是一个方法名。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "8a2eedd5-ec9a-41c4-bb09-4112c9bf53d6",
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'randint' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-1-2e7906960da7>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mrandint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m: name 'randint' is not defined"
     ]
    }
   ],
   "source": [
    "randint()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2d8b82e3-fd6d-4ce6-ac0b-bfee0f7440c8",
   "metadata": {},
   "source": [
    "为什么我们没有告诉计算机存在一个`print`的方法，但是我们可以直接使用这个方法？"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "9c1f45c3-133d-45f3-9e0f-9da2238828ee",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "`print`方法没有告诉过计算机，但是计算机就允许我使用它向屏幕输出信息。\n",
      "这一定是计算机造就准备好的方法了。`input`方法也一样。\n"
     ]
    }
   ],
   "source": [
    "print(\"`print`方法没有告诉过计算机，但是计算机就允许我使用它向屏幕输出信息。\")\n",
    "print(\"这一定是计算机造就准备好的方法了。`input`方法也一样。\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f8df28f4-e2a7-4c59-81c9-28eb17701482",
   "metadata": {},
   "source": [
    "是否存在一个生成随机整数的方法可以直接使用呢？例如：`give_me_a_number_between_0_and_9`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "76b091e7-f33a-4ed1-9230-58534a48a45d",
   "metadata": {},
   "outputs": [],
   "source": [
    "print(\"`give_me_a_number_between_0_and_9`不是一个计算机认识的方法。\")\n",
    "print(\"它不能生成一个范围在0-9之间的随机数。\")\n",
    "give_me_a_number_between_0_and_9()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8d84e983-f01f-483b-b4f0-0c6e3a32cee4",
   "metadata": {},
   "source": [
    "但是有一个你不认识的小哥哥，自己发明了这样一个方法，可以实现生成一定范围的随机数的功能。\n",
    "\n",
    "并且这个小哥哥把这个方法存放在一个单独的仓库里，只是你现在正在使用的计算机不知道而已。\n",
    "\n",
    "小哥哥告诉你这个方法的名字叫`randint`，它被存放在一个名叫`random`的仓库里。仓库里还存放着其它一些有趣的方法。\n",
    "\n",
    "如何让你正在使用的计算机能够使用`random`仓库里的`randint`方法呢？\n",
    "\n",
    "运行下面这句话相当于让计算机去`random`仓库找`randint`这个方法，并且学会这个方法，供你使用。\n",
    "\n",
    "如果执行这句代码没有发生错误，那么代表着在接下来的和计算机的对话中就可以使用`randint`方法了。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "9873a7f9-dc17-4568-9f07-81ea2d4bbe99",
   "metadata": {},
   "outputs": [],
   "source": [
    "from random import randint"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a032ee2f-d4ae-43f0-b5b6-ea0e299ff087",
   "metadata": {},
   "source": [
    "下面这段代码执行时会报错，提示不存在一个名叫`random2`的模块（仓库）。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "a1e56cdd-a1d7-47b1-a2ff-2c2f4810ffef",
   "metadata": {},
   "outputs": [
    {
     "ename": "ModuleNotFoundError",
     "evalue": "No module named 'random2'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-6-83e1eae1b338>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0;32mfrom\u001b[0m \u001b[0mrandom2\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mrandint\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;31mModuleNotFoundError\u001b[0m: No module named 'random2'"
     ]
    }
   ],
   "source": [
    "from random2 import randint"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "98659a21-0604-4c37-ac89-b940e2ed41a5",
   "metadata": {},
   "source": [
    "下面这段代码执行时也会报错，它提示在名称为random2的模块（仓库）找不到名字为`randomint`的方法。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "3d9c6bc5-ffd5-4041-ad54-35aeac43ea11",
   "metadata": {},
   "outputs": [
    {
     "ename": "ImportError",
     "evalue": "cannot import name 'randomint' from 'random' (/usr/lib/python3.8/random.py)",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mImportError\u001b[0m                               Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-7-597b3c9c70ab>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0;32mfrom\u001b[0m \u001b[0mrandom\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mrandomint\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;31mImportError\u001b[0m: cannot import name 'randomint' from 'random' (/usr/lib/python3.8/random.py)"
     ]
    }
   ],
   "source": [
    "from random import randomint"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c0e7fe43-e3f0-4c1f-81c0-d962af9387c3",
   "metadata": {},
   "source": [
    "`randint`方法可以随机生成一定范围内的整数，但是如何告诉它这个范围呢？可以在调用这个方法时在它的括号内依次写上0和9，用逗号隔开。像下面这样："
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "d6f461b8-0d71-4d87-a126-b6ea7a7c9e81",
   "metadata": {},
   "outputs": [],
   "source": [
    "num = randint(0, 9)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "36ccbad4-b2c8-4340-b383-6629a0529bfe",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "9\n"
     ]
    }
   ],
   "source": [
    "print(num)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8f3b854c-738d-494b-bfd3-1be124e90c19",
   "metadata": {},
   "source": [
    "尝试重复多次运行上面这行代码，观察每一次运行代码给出的数字是否一样，0和9有没有出现过？有没有出现过不在0-9范围内的整数呢？"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f083fd25-a774-4bc0-8b51-b5e95f1a021f",
   "metadata": {},
   "source": [
    "改变`randint`方法后面圆括号内两个数的大小，生成的随机数的范围也会发生变化。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "1170e417-c50f-4b34-b0de-47c953d574ef",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "10\n"
     ]
    }
   ],
   "source": [
    "num2 = randint(0, 100)\n",
    "print(num2)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b25f3c30-4322-4ce6-a080-a8f6b8c021b4",
   "metadata": {},
   "source": [
    "如果这两个相同，那么生成的随机数就不再随机了，而是确定的这个数。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "f00e92f6-4438-4b9d-817c-87e136602914",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "100\n"
     ]
    }
   ],
   "source": [
    "num3 = randint(100, 100)\n",
    "print(num3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "afd3df0a-e64e-4dcc-9dbb-00d5d0378d4e",
   "metadata": {},
   "source": [
    "如果让圆括号内左边的数比右边的数大，也无法生成出随机数，因为找不到一个数比9大的同时又比0小。可以看出，圆括号内的数字的数序时有讲究的。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "c63744c0-c105-4839-bd49-66c209f235d8",
   "metadata": {},
   "outputs": [
    {
     "ename": "TypeError",
     "evalue": "randint() takes 3 positional arguments but 4 were given",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-31-175c639ec894>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mnum4\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mrandint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m9\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnum4\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mTypeError\u001b[0m: randint() takes 3 positional arguments but 4 were given"
     ]
    }
   ],
   "source": [
    "num4 = randint(9, 0)\n",
    "print(num4)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5fb8e033-7b1b-4a3d-8969-8913b23a46fb",
   "metadata": {
    "tags": []
   },
   "source": [
    "下面的代码把随机生成得到的整数赋值给一个名为`num_computer_generated`这个变量。如果不使用`print`语句，就只有计算机知道生成的随机数是什么了。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "27738f58-a305-4935-b508-3d4d75a3dacd",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "I have a number, your turn to guess: 2\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "You guessed:  2 .\n"
     ]
    }
   ],
   "source": [
    "from random import randint\n",
    "num_computer_generated = randint(0, 9)\n",
    "num_guess = int(input(\"I have a number, your turn to guess:\"))\n",
    "print(\"You guessed: \", num_guess, \".\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2eb1d644-9b9f-40da-8b28-a446770c21cd",
   "metadata": {},
   "source": [
    "#### 2. 如何根据不同条件让计算机执行不同的程序代码\n",
    "\n",
    "想象下面的场景：备备是一个对编程很感兴趣的小朋友，他的妈妈给备备的编程学习制定了一个奖励计划，约定如果备备一学期下来编程总成绩在95分或以上，那么备备可以获得一个乐高积木作为奖励；如果达不到这个成绩，奖励就没有了。假如备备的编程课成绩是由你通过键盘来输入的，如何编写程序来输出不同分数下备备是否能获得奖励呢？\n",
    "\n",
    "我们可以使用下面的代码片段来实现这个功能:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "33df4927-acfb-4eb9-8317-cf284442cb81",
   "metadata": {},
   "outputs": [],
   "source": [
    "score_math = int(input(\"备备数学考了多少分:\"))\n",
    "if score_math >= 95:      # 如果数学成绩达到或超过95分\n",
    "    print(\"备备可以获得一个乐高积木奖励。\")\n",
    "else:                     # 否则\n",
    "    print(\"备备不会有奖励，因为成绩不够好。\")\n",
    "    \n",
    "print(\"备备你满意这样的结果吗?\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "58374957-387b-42a8-852c-a562c230e034",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "备备数学考了多少分: 94\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "备备不会有奖励，因为成绩不够好。\n",
      "备备你满意这样的结果吗?\n"
     ]
    }
   ],
   "source": [
    "# if >= is not allowed to use and 95 should still be used\n",
    "# we can write the program like this:\n",
    "score_math = int(input(\"备备数学考了多少分:\"))\n",
    "if score_math < 95:      # 如果数学成绩低于95分\n",
    "    print(\"备备不会有奖励，因为成绩不够好。\")\n",
    "else:                     # 否则\n",
    "    print(\"备备可以获得一个乐高积木奖励。\")    \n",
    "    \n",
    "print(\"备备你满意这样的结果吗?\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "929ff8f5-ec49-4273-8785-8c4f9548d37b",
   "metadata": {},
   "source": [
    "把上述代码的第七行前面添加四个空格，与第5行对齐，重新运行程序多次，观察程序输出有什么变化？"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d38914bc-180f-4a71-8ae3-91a747268bd6",
   "metadata": {},
   "source": [
    "如果小明只有在考到满分100分的时候，才有这个奖励。那么程序可以这样写:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d3fd86b3-4547-488c-8291-e1ad067400f2",
   "metadata": {},
   "outputs": [],
   "source": [
    "score_math = int(input(\"备备数学考了多少分:\"))\n",
    "if score_math == 100:\n",
    "    print(\"备备可以获得一个乐高积木奖励。\")\n",
    "else:\n",
    "    print(\"备备不会有奖励，因为成绩不够好。\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d55f37d9",
   "metadata": {},
   "source": [
    "### Solution 编程求解"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "6cf0130b-541a-4fa3-8959-4b44a5082a17",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "我是你的小助手，我想和你玩一个猜数字的游戏。\n",
      "我会从0-9之间随便挑出一个数字，把它放在变量`num_computer_generated`里\n",
      "你不可以用`print`方法偷看这个数字\n",
      "你可以用键盘输入告诉我你猜的数字，我们把你猜的数字放在变量`num_you_guessed`里\n",
      "好的，游戏开始！我开始选数字了...\n",
      "不好意思，稍等。我得去仓库里先找个东西...\n",
      "让你久等了，我回来拉。我开始选数字了...\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "我选好了，现在你来猜吧(0-9): 6\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "真可惜，你没有猜对。我选的数字是: 7\n",
      "如果你想继续再玩一次，就再运行依次这个代码单元格吧。\n"
     ]
    }
   ],
   "source": [
    "print(\"我是你的小助手，我想和你玩一个猜数字的游戏。\")\n",
    "print(\"我会从0-9之间随便挑出一个数字，把它放在变量`num_computer_generated`里\")\n",
    "print(\"你不可以用`print`方法偷看这个数字\")\n",
    "print(\"你可以用键盘输入告诉我你猜的数字，我们把你猜的数字放在变量`num_you_guessed`里\")\n",
    "print(\"好的，游戏开始！我开始选数字了...\")\n",
    "print(\"不好意思，稍等。我得去仓库里先找个东西...\")\n",
    "from time import sleep            # 这是什么？\n",
    "sleep(6)                         # sleep(10) 有什么用\n",
    "from random import randint\n",
    "print(\"让你久等了，我回来拉。我开始选数字了...\")\n",
    "num_computer_generated = randint(0, 9)\n",
    "your_guess = input(\"我选好了，现在你来猜吧(0-9):\")\n",
    "num_you_guessed = int(your_guess)\n",
    "if num_you_guessed == num_computer_generated:\n",
    "    print(\"恭喜你，你猜对了\")\n",
    "else:\n",
    "    print(\"真可惜，你没有猜对。我选的数字是:\", num_computer_generated)\n",
    "    \n",
    "print(\"如果你想继续再玩一次，就再运行依次这个代码单元格吧。\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "65665292-923a-414e-8012-178920d2ab26",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Solutoin: English Version\n",
    "print(\"I'm your little assistant. Let's play a number guessing game\")\n",
    "print(\"I will choose an integer randomly from 0-9, and assign it to a variable `num_computer_generated`\")\n",
    "print(\"You may not peek the value by using `print` method.\")\n",
    "print(\"You can tell me what you guess by input from keyboard, and we keep the value in a variable `num_you_guessed`\")\n",
    "print(\"OK, let's start! I am selecting the number...\")\n",
    "print(\"Oh, sorry. I have to leave for a while...\")\n",
    "from time import sleep            # what's this?\n",
    "sleep(10)                         # what's the use of sleep(10)?\n",
    "from random import randint\n",
    "print(\"Sorry for kep you waiting, I am back. I am selecting the number...\")\n",
    "num_computer_generated = randint(0, 9)\n",
    "your_guess = input(\"I am done, now tell me your guess:\")\n",
    "num_you_guessed = int(your_guess)\n",
    "if num_you_guessed == num_computer_generated:\n",
    "    print(\"Congratulations, you are right!\")\n",
    "else:\n",
    "    print(\"Sorry, you didn't to make it. My number is\", num_computer_generated)\n",
    "    \n",
    "print(\"If you want to play once again, rerun this code cell.\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "latest-contamination",
   "metadata": {},
   "source": [
    "### Summary 知识点小结"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "afb3f674",
   "metadata": {},
   "source": [
    "1. 可以通过`from a import b`的形式从模块(仓库)`a`导入一个`b`，前提是`a`和`b`存在。 `b`可以是一个方法名；\n",
    "2. 方法`randint`存在于模块（仓库）`random`中，它可以随机生成一定范围内的整数；\n",
    "3. 方法`print`, `input`, `int`等存在于一个计算机默认的仓库中，不需要`import`操作，可以直接使用；\n",
    "4. 调用一个方法时，方法名后面的一对圆括号内可以添加一些额外的信息，这些信息可以改变方法实现的一些细节；\n",
    "5. 可以通过关键词`if`, `else`引导的条件控制语句实现根据条件是否满足而执行不同的程序代码片段；\n",
    "6. 条件控制语句有特定的格式：冒号、缩进等；这些格式是一门语言语法的一部分，属于“约定”，需要遵守；\n",
    "7. Python中的`>`, `>=`, `<`, `<=`, `==`分别对应于“大于”、“大于或等于”、“小于”、“小于或等于”、“等于”数学中的比较运算；\n",
    "8. 条件表达式的结果只有2个：要么是真的（条件满足），要么是假的（条件不满足），这两个结果分别记为`True`和`False`；\n",
    "9. `time`模块（仓库）中的`sleep`方法；"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bizarre-assurance",
   "metadata": {},
   "source": [
    "### CS Tips 计算机小知识"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "92100f08",
   "metadata": {},
   "source": [
    "个人计算机一般通过随机数生成算法来生成随机数，通过这种形式生成的随机数并不是完全随机的，而是根据一个初始条件生成的像是随机出现的随机数序列，它们称为“伪随机数”，这个初始条件一般称为“种子”。真正的随机数通常需要专门的硬件设备采集真实环境信息并在此基础上通过算法来实现。"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "864412da-25c3-4e65-b082-48907740b5e5",
   "metadata": {},
   "source": [
    "### Assignments 作业"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e057088c-ca30-4242-9738-49fe51746328",
   "metadata": {},
   "source": [
    "1. Use the `randint` method in the `random` module to randomly select 10 numbers from the 100 natural numbers 1-100, calculate the average of the 10 numbers chosen and print the average value. 使用`random`模块里的`randint`方法，从1-100这100个自然数中随机选出10数，计算这10个数的平均数，并把这个平均数打印出来。\n",
    "\n",
    "    **Note**: The average of a group of numbers is the sum of this group of numbers divided by the number in the group. **备注**:一组数的平均数是这组数的和除以这组数的个数。  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6e0d1f78-32b5-4b20-ba30-025998224e7e",
   "metadata": {},
   "outputs": [],
   "source": [
    "# write your codes here 在这里写你的代码\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "63bf72cd-6d1e-4f07-8ada-9d62fed12e0a",
   "metadata": {},
   "source": [
    "2. There are some other interesting methods in `random` module (warehouse), all of which are related to \"random\". One of the methods is quite special. Its name is also called `random`, which means that the name of the module (warehouse) is exactly the same as the name of the method.`random`模块（仓库）里面还有许多有趣的方法，这些方法都和“随机”有关，其中有一个方法比较特别，它的名字也叫`random`，也就是说模块（仓库）的名字和方法的名字完全一样。\n",
    "\n",
    "   - a) Try to let your computer find the `random` method from the `random` module (warehouse), and run this method repeatedly; 试着让计算机从`random`仓库里找到导入`random`方法，然后重复多次运行这个方法; \n",
    "   - b) Observe the data output by the method. Guess what are the characteristics of the numbers generated by this method? 观察方法每一次输出的数据，猜一猜这个方法生成的随机数有什么特点？\n",
    "   - c) In your life, have you ever encountered different things with the same name? Try to give some examples. 在生活中，你有没有遇到过不同的东西它们的名字是一样的？试着举几个例子。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "76d30dc6-71c5-4d7c-ac65-3b734f1b24bd",
   "metadata": {},
   "outputs": [],
   "source": [
    "# a) write your codes in this cell, and run it any times you want\n",
    "#    在这里写上你的代码，可以执行任意次数\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e3a1fd57-336d-4d6d-a57f-0d2981cc8442",
   "metadata": {},
   "outputs": [],
   "source": [
    "# b) Write your answer here:\n",
    "#"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0c4db7af-23b8-46be-b4b1-5ddad6647443",
   "metadata": {},
   "outputs": [],
   "source": [
    "# c) Write your answer here:\n",
    "#"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d7355cd0-6d4e-4138-b478-4e288b0217ac",
   "metadata": {},
   "source": [
    "3. In one of the previous homeworks, you were asked to wrote a program that implements the division operation. This program accepts the dividend and divisor from keyboard input and calculate the quotient. The program will report an error when it encounters a divisor of 0. We can avoid this error by adding a conditional statement. More specific, when the program detects that the divisor is 0, it does not perform the division operation, but outputs a piece of information like \"the divisor provided is 0, the division cannot be performed\"; otherwise, the original division operation is performed and shown by `print` method. Please try to make appropriate modifications to the following program to complete this function.   \n",
    "\n",
    "   在上一讲的作业中，我们编写了一段程序实现了除法运算，这个程序接受来自键盘输入的被除数和除数并计算出商。这个程序在碰到除数为0时会报错无法顺利。我们可以通过添加一段条件语句代码来避免这个报错。具体的方法时，当程序检测到除数为0时就不执行除法运算，而是输出一段信息，提示“来自键盘输入的除数为0，不能执行除法”；否则，则执行原定的除法运算，并给出运算的结果。请你试着对下面的程序做适当的修改，完成这个功能。 "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c3677cba-1da3-4632-9d77-649e75b5ef82",
   "metadata": {},
   "outputs": [],
   "source": [
    "# modify the codes below 修改下面的代码\n",
    "\n",
    "print(\"我是新版的整数除法运算小能手\")\n",
    "first_input = input(\"请输入被除数(整数)：\")\n",
    "second_input = input(\"请输入除数(整数)：\")\n",
    "dividend = int(first_input)            # 被除数\n",
    "divisor = int(second_input)            # 除数\n",
    "quotien = dividend / divisor           # 商\n",
    "print(dividend, \"/\", divisor, \"=\", quotien)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0f828fc6-cdd3-4953-b5b2-b019196c7601",
   "metadata": {},
   "source": [
    "4. Write multi-line of Python codes in one cell to calculate and print out the perimeter and area of a rectagle with the length and width provided from keyboard input. 在一个代码单元格里书写多行Python代码来计算一个长方形的周长和面积，确定这个长方形的长和宽从键盘输入得到。\n",
    "\n",
    "   Requirements: 要求:\n",
    "   - the codes you write receive two number strings from keyboard indicating the length and width of a potential rectangle 你的代码能够从键盘接受两个数字字符串分别表示可能的长方形的长和宽；\n",
    "   - convert these two strings to two Integer numbers, assign them to two variables. The names of the length and width should be easy to understand 将这两个字符串转化为两个整数型数字并将其赋值给表示长和宽的两个变量，要求这两个变量名直观易看懂；\n",
    "   - Check whether the length and width provided can build a rectangle. If not, print out \"Not a rectangle\"; otherwise, continue the following step 检查得到的长宽能否构成一个长方形，如果不行，打印输出“Not a rectangle”，否则，执行下面这步；\n",
    "   - calculate the perimiter and the area of this rectangle, assign the result to `perimeter` and `area` variable, print out the perimeter and area 计算这个长方形的周长和面积，并将结果分别赋值给名为`perimeter`和`area`的变量；打印出这个长方形的周长和面积；\n",
    "   \n",
    "\n",
    "   Run and test 5 times your codes with the following inputs (length, width) in the table. For each test, observe whether the results are equal to the Perimeter and Area provided. 分别使用下表中的length和width的值作为键盘输入运行并测试你的代码共计5次，观察结果是否与对应的Perimiter和Area值一样；\n",
    "  \n",
    "   **Note**: You should run the same code on all test data; that being said, you may not change the codes between each run. **注意**: 你应该用同样的代码来运行所有的测试数据，也就是说，你不应该在两次测试间隙修改你的代码\n",
    "  \n",
    "   **Hint**: Use `if` `else` statements to control the output. You can assume that the rectangle will not be formed if length*width equals 0. **提示**：使用`if`，`else`语句来控制输出.当长度和宽度相乘为0是，你可以认为不能构成一个矩形。\n",
    "  \n",
    "  | length    |  width     |        output                   |\n",
    "  | --------- |:----------:|:-------------------------------:|\n",
    "  |   12      |   12       | perimeter is: 48, area is: 144  |\n",
    "  |   18      |   14       | perimeter is: 48, area is: 144  |\n",
    "  |   0       |   4        |      Not a rectangle            |\n",
    "  |   1091    |   0        |      Not a rectangle            |\n",
    "  |   0       |   0        |      Not a rectangle            |\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "081d4300-d9c7-4fc0-b922-5e72f7db9478",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Write your code here 在这里写上你的代码\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
