{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "relative-location",
   "metadata": {},
   "source": [
    "## 第16讲 一共可以排出多少个不同的队伍"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "digital-consensus",
   "metadata": {
    "heading_collapsed": true
   },
   "source": [
    "### Assignments 作业"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "35e665f6-a1ed-4648-812b-e6bf65a94954",
   "metadata": {},
   "source": [
    "1. 现在有5个小朋友：Jason, Sophie, Tony, Yunzi, Celine, 他们排成一个纵队，那么一共有多少种排队方法？请分别用`while`循环`for`...`in`循环，和`permutations`方法来完成本题。<br>\n",
    "   If now there is 5 chldren instead of 4 (Celine added), how many queues can be formed. Please use `while` loop, `for`...`in` loop, and `permuations` methods to answer this question seperatedly."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "58d518fa-6cfb-4787-972f-42252b4d812e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "('Sophie', 'Tony', 'Jason', 'Yunzi', 'Celine')\n",
      "('Sophie', 'Tony', 'Jason', 'Celine', 'Yunzi')\n",
      "('Sophie', 'Tony', 'Yunzi', 'Jason', 'Celine')\n",
      "('Sophie', 'Tony', 'Yunzi', 'Celine', 'Jason')\n",
      "('Sophie', 'Tony', 'Celine', 'Jason', 'Yunzi')\n",
      "('Sophie', 'Tony', 'Celine', 'Yunzi', 'Jason')\n",
      "('Sophie', 'Jason', 'Tony', 'Yunzi', 'Celine')\n",
      "('Sophie', 'Jason', 'Tony', 'Celine', 'Yunzi')\n",
      "('Sophie', 'Jason', 'Yunzi', 'Tony', 'Celine')\n",
      "('Sophie', 'Jason', 'Yunzi', 'Celine', 'Tony')\n",
      "('Sophie', 'Jason', 'Celine', 'Tony', 'Yunzi')\n",
      "('Sophie', 'Jason', 'Celine', 'Yunzi', 'Tony')\n",
      "('Sophie', 'Yunzi', 'Tony', 'Jason', 'Celine')\n",
      "('Sophie', 'Yunzi', 'Tony', 'Celine', 'Jason')\n",
      "('Sophie', 'Yunzi', 'Jason', 'Tony', 'Celine')\n",
      "('Sophie', 'Yunzi', 'Jason', 'Celine', 'Tony')\n",
      "('Sophie', 'Yunzi', 'Celine', 'Tony', 'Jason')\n",
      "('Sophie', 'Yunzi', 'Celine', 'Jason', 'Tony')\n",
      "('Sophie', 'Celine', 'Tony', 'Jason', 'Yunzi')\n",
      "('Sophie', 'Celine', 'Tony', 'Yunzi', 'Jason')\n",
      "('Sophie', 'Celine', 'Jason', 'Tony', 'Yunzi')\n",
      "('Sophie', 'Celine', 'Jason', 'Yunzi', 'Tony')\n",
      "('Sophie', 'Celine', 'Yunzi', 'Tony', 'Jason')\n",
      "('Sophie', 'Celine', 'Yunzi', 'Jason', 'Tony')\n",
      "('Tony', 'Sophie', 'Jason', 'Yunzi', 'Celine')\n",
      "('Tony', 'Sophie', 'Jason', 'Celine', 'Yunzi')\n",
      "('Tony', 'Sophie', 'Yunzi', 'Jason', 'Celine')\n",
      "('Tony', 'Sophie', 'Yunzi', 'Celine', 'Jason')\n",
      "('Tony', 'Sophie', 'Celine', 'Jason', 'Yunzi')\n",
      "('Tony', 'Sophie', 'Celine', 'Yunzi', 'Jason')\n",
      "('Tony', 'Jason', 'Sophie', 'Yunzi', 'Celine')\n",
      "('Tony', 'Jason', 'Sophie', 'Celine', 'Yunzi')\n",
      "('Tony', 'Jason', 'Yunzi', 'Sophie', 'Celine')\n",
      "('Tony', 'Jason', 'Yunzi', 'Celine', 'Sophie')\n",
      "('Tony', 'Jason', 'Celine', 'Sophie', 'Yunzi')\n",
      "('Tony', 'Jason', 'Celine', 'Yunzi', 'Sophie')\n",
      "('Tony', 'Yunzi', 'Sophie', 'Jason', 'Celine')\n",
      "('Tony', 'Yunzi', 'Sophie', 'Celine', 'Jason')\n",
      "('Tony', 'Yunzi', 'Jason', 'Sophie', 'Celine')\n",
      "('Tony', 'Yunzi', 'Jason', 'Celine', 'Sophie')\n",
      "('Tony', 'Yunzi', 'Celine', 'Sophie', 'Jason')\n",
      "('Tony', 'Yunzi', 'Celine', 'Jason', 'Sophie')\n",
      "('Tony', 'Celine', 'Sophie', 'Jason', 'Yunzi')\n",
      "('Tony', 'Celine', 'Sophie', 'Yunzi', 'Jason')\n",
      "('Tony', 'Celine', 'Jason', 'Sophie', 'Yunzi')\n",
      "('Tony', 'Celine', 'Jason', 'Yunzi', 'Sophie')\n",
      "('Tony', 'Celine', 'Yunzi', 'Sophie', 'Jason')\n",
      "('Tony', 'Celine', 'Yunzi', 'Jason', 'Sophie')\n",
      "('Jason', 'Sophie', 'Tony', 'Yunzi', 'Celine')\n",
      "('Jason', 'Sophie', 'Tony', 'Celine', 'Yunzi')\n",
      "('Jason', 'Sophie', 'Yunzi', 'Tony', 'Celine')\n",
      "('Jason', 'Sophie', 'Yunzi', 'Celine', 'Tony')\n",
      "('Jason', 'Sophie', 'Celine', 'Tony', 'Yunzi')\n",
      "('Jason', 'Sophie', 'Celine', 'Yunzi', 'Tony')\n",
      "('Jason', 'Tony', 'Sophie', 'Yunzi', 'Celine')\n",
      "('Jason', 'Tony', 'Sophie', 'Celine', 'Yunzi')\n",
      "('Jason', 'Tony', 'Yunzi', 'Sophie', 'Celine')\n",
      "('Jason', 'Tony', 'Yunzi', 'Celine', 'Sophie')\n",
      "('Jason', 'Tony', 'Celine', 'Sophie', 'Yunzi')\n",
      "('Jason', 'Tony', 'Celine', 'Yunzi', 'Sophie')\n",
      "('Jason', 'Yunzi', 'Sophie', 'Tony', 'Celine')\n",
      "('Jason', 'Yunzi', 'Sophie', 'Celine', 'Tony')\n",
      "('Jason', 'Yunzi', 'Tony', 'Sophie', 'Celine')\n",
      "('Jason', 'Yunzi', 'Tony', 'Celine', 'Sophie')\n",
      "('Jason', 'Yunzi', 'Celine', 'Sophie', 'Tony')\n",
      "('Jason', 'Yunzi', 'Celine', 'Tony', 'Sophie')\n",
      "('Jason', 'Celine', 'Sophie', 'Tony', 'Yunzi')\n",
      "('Jason', 'Celine', 'Sophie', 'Yunzi', 'Tony')\n",
      "('Jason', 'Celine', 'Tony', 'Sophie', 'Yunzi')\n",
      "('Jason', 'Celine', 'Tony', 'Yunzi', 'Sophie')\n",
      "('Jason', 'Celine', 'Yunzi', 'Sophie', 'Tony')\n",
      "('Jason', 'Celine', 'Yunzi', 'Tony', 'Sophie')\n",
      "('Yunzi', 'Sophie', 'Tony', 'Jason', 'Celine')\n",
      "('Yunzi', 'Sophie', 'Tony', 'Celine', 'Jason')\n",
      "('Yunzi', 'Sophie', 'Jason', 'Tony', 'Celine')\n",
      "('Yunzi', 'Sophie', 'Jason', 'Celine', 'Tony')\n",
      "('Yunzi', 'Sophie', 'Celine', 'Tony', 'Jason')\n",
      "('Yunzi', 'Sophie', 'Celine', 'Jason', 'Tony')\n",
      "('Yunzi', 'Tony', 'Sophie', 'Jason', 'Celine')\n",
      "('Yunzi', 'Tony', 'Sophie', 'Celine', 'Jason')\n",
      "('Yunzi', 'Tony', 'Jason', 'Sophie', 'Celine')\n",
      "('Yunzi', 'Tony', 'Jason', 'Celine', 'Sophie')\n",
      "('Yunzi', 'Tony', 'Celine', 'Sophie', 'Jason')\n",
      "('Yunzi', 'Tony', 'Celine', 'Jason', 'Sophie')\n",
      "('Yunzi', 'Jason', 'Sophie', 'Tony', 'Celine')\n",
      "('Yunzi', 'Jason', 'Sophie', 'Celine', 'Tony')\n",
      "('Yunzi', 'Jason', 'Tony', 'Sophie', 'Celine')\n",
      "('Yunzi', 'Jason', 'Tony', 'Celine', 'Sophie')\n",
      "('Yunzi', 'Jason', 'Celine', 'Sophie', 'Tony')\n",
      "('Yunzi', 'Jason', 'Celine', 'Tony', 'Sophie')\n",
      "('Yunzi', 'Celine', 'Sophie', 'Tony', 'Jason')\n",
      "('Yunzi', 'Celine', 'Sophie', 'Jason', 'Tony')\n",
      "('Yunzi', 'Celine', 'Tony', 'Sophie', 'Jason')\n",
      "('Yunzi', 'Celine', 'Tony', 'Jason', 'Sophie')\n",
      "('Yunzi', 'Celine', 'Jason', 'Sophie', 'Tony')\n",
      "('Yunzi', 'Celine', 'Jason', 'Tony', 'Sophie')\n",
      "('Celine', 'Sophie', 'Tony', 'Jason', 'Yunzi')\n",
      "('Celine', 'Sophie', 'Tony', 'Yunzi', 'Jason')\n",
      "('Celine', 'Sophie', 'Jason', 'Tony', 'Yunzi')\n",
      "('Celine', 'Sophie', 'Jason', 'Yunzi', 'Tony')\n",
      "('Celine', 'Sophie', 'Yunzi', 'Tony', 'Jason')\n",
      "('Celine', 'Sophie', 'Yunzi', 'Jason', 'Tony')\n",
      "('Celine', 'Tony', 'Sophie', 'Jason', 'Yunzi')\n",
      "('Celine', 'Tony', 'Sophie', 'Yunzi', 'Jason')\n",
      "('Celine', 'Tony', 'Jason', 'Sophie', 'Yunzi')\n",
      "('Celine', 'Tony', 'Jason', 'Yunzi', 'Sophie')\n",
      "('Celine', 'Tony', 'Yunzi', 'Sophie', 'Jason')\n",
      "('Celine', 'Tony', 'Yunzi', 'Jason', 'Sophie')\n",
      "('Celine', 'Jason', 'Sophie', 'Tony', 'Yunzi')\n",
      "('Celine', 'Jason', 'Sophie', 'Yunzi', 'Tony')\n",
      "('Celine', 'Jason', 'Tony', 'Sophie', 'Yunzi')\n",
      "('Celine', 'Jason', 'Tony', 'Yunzi', 'Sophie')\n",
      "('Celine', 'Jason', 'Yunzi', 'Sophie', 'Tony')\n",
      "('Celine', 'Jason', 'Yunzi', 'Tony', 'Sophie')\n",
      "('Celine', 'Yunzi', 'Sophie', 'Tony', 'Jason')\n",
      "('Celine', 'Yunzi', 'Sophie', 'Jason', 'Tony')\n",
      "('Celine', 'Yunzi', 'Tony', 'Sophie', 'Jason')\n",
      "('Celine', 'Yunzi', 'Tony', 'Jason', 'Sophie')\n",
      "('Celine', 'Yunzi', 'Jason', 'Sophie', 'Tony')\n",
      "('Celine', 'Yunzi', 'Jason', 'Tony', 'Sophie')\n",
      "There are 120 combinations.\n"
     ]
    }
   ],
   "source": [
    "# Use while loop\n",
    "classmates = [\"Sophie\", \"Tony\", \"Jason\", \"Yunzi\", \"Celine\"]\n",
    "queues = []\n",
    "n_classmates = len(classmates)\n",
    "queue = []\n",
    "index = 0\n",
    "i, j, k, m, n = 0, 0, 0, 0, 0\n",
    "while i < n_classmates:\n",
    "    j = 0\n",
    "    while j < n_classmates:\n",
    "        if j != i:\n",
    "            k = 0\n",
    "            while k < n_classmates:\n",
    "                if k != j and k != i:\n",
    "                    m = 0\n",
    "                    while m < n_classmates:\n",
    "                        if m != k and m != j and m != i:\n",
    "                            n = 0\n",
    "                            while n < n_classmates:\n",
    "                                if n != m and n != k and n != j and n != i:\n",
    "                                    first = classmates[i]\n",
    "                                    second = classmates[j]\n",
    "                                    third = classmates[k]\n",
    "                                    forth = classmates[m]\n",
    "                                    fifth = classmates[n]\n",
    "                                    queue = (first, second, third, forth, fifth)\n",
    "                                    queues.append(queue)\n",
    "                                    index += 1\n",
    "                                n += 1\n",
    "                        m += 1\n",
    "                k += 1\n",
    "        j += 1\n",
    "    i += 1\n",
    "    \n",
    "for queue in queues:\n",
    "    print(queue)\n",
    "    \n",
    "print(\"There are {} combinations.\".format(index))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "8698af61-f845-4f6d-8b94-928081d7e89b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "('Sophie', 'Tony', 'Jason', 'Yunzi', 'Celine')\n",
      "('Sophie', 'Tony', 'Jason', 'Celine', 'Yunzi')\n",
      "('Sophie', 'Tony', 'Yunzi', 'Jason', 'Celine')\n",
      "('Sophie', 'Tony', 'Yunzi', 'Celine', 'Jason')\n",
      "('Sophie', 'Tony', 'Celine', 'Jason', 'Yunzi')\n",
      "('Sophie', 'Tony', 'Celine', 'Yunzi', 'Jason')\n",
      "('Sophie', 'Jason', 'Tony', 'Yunzi', 'Celine')\n",
      "('Sophie', 'Jason', 'Tony', 'Celine', 'Yunzi')\n",
      "('Sophie', 'Jason', 'Yunzi', 'Tony', 'Celine')\n",
      "('Sophie', 'Jason', 'Yunzi', 'Celine', 'Tony')\n",
      "('Sophie', 'Jason', 'Celine', 'Tony', 'Yunzi')\n",
      "('Sophie', 'Jason', 'Celine', 'Yunzi', 'Tony')\n",
      "('Sophie', 'Yunzi', 'Tony', 'Jason', 'Celine')\n",
      "('Sophie', 'Yunzi', 'Tony', 'Celine', 'Jason')\n",
      "('Sophie', 'Yunzi', 'Jason', 'Tony', 'Celine')\n",
      "('Sophie', 'Yunzi', 'Jason', 'Celine', 'Tony')\n",
      "('Sophie', 'Yunzi', 'Celine', 'Tony', 'Jason')\n",
      "('Sophie', 'Yunzi', 'Celine', 'Jason', 'Tony')\n",
      "('Sophie', 'Celine', 'Tony', 'Jason', 'Yunzi')\n",
      "('Sophie', 'Celine', 'Tony', 'Yunzi', 'Jason')\n",
      "('Sophie', 'Celine', 'Jason', 'Tony', 'Yunzi')\n",
      "('Sophie', 'Celine', 'Jason', 'Yunzi', 'Tony')\n",
      "('Sophie', 'Celine', 'Yunzi', 'Tony', 'Jason')\n",
      "('Sophie', 'Celine', 'Yunzi', 'Jason', 'Tony')\n",
      "('Tony', 'Sophie', 'Jason', 'Yunzi', 'Celine')\n",
      "('Tony', 'Sophie', 'Jason', 'Celine', 'Yunzi')\n",
      "('Tony', 'Sophie', 'Yunzi', 'Jason', 'Celine')\n",
      "('Tony', 'Sophie', 'Yunzi', 'Celine', 'Jason')\n",
      "('Tony', 'Sophie', 'Celine', 'Jason', 'Yunzi')\n",
      "('Tony', 'Sophie', 'Celine', 'Yunzi', 'Jason')\n",
      "('Tony', 'Jason', 'Sophie', 'Yunzi', 'Celine')\n",
      "('Tony', 'Jason', 'Sophie', 'Celine', 'Yunzi')\n",
      "('Tony', 'Jason', 'Yunzi', 'Sophie', 'Celine')\n",
      "('Tony', 'Jason', 'Yunzi', 'Celine', 'Sophie')\n",
      "('Tony', 'Jason', 'Celine', 'Sophie', 'Yunzi')\n",
      "('Tony', 'Jason', 'Celine', 'Yunzi', 'Sophie')\n",
      "('Tony', 'Yunzi', 'Sophie', 'Jason', 'Celine')\n",
      "('Tony', 'Yunzi', 'Sophie', 'Celine', 'Jason')\n",
      "('Tony', 'Yunzi', 'Jason', 'Sophie', 'Celine')\n",
      "('Tony', 'Yunzi', 'Jason', 'Celine', 'Sophie')\n",
      "('Tony', 'Yunzi', 'Celine', 'Sophie', 'Jason')\n",
      "('Tony', 'Yunzi', 'Celine', 'Jason', 'Sophie')\n",
      "('Tony', 'Celine', 'Sophie', 'Jason', 'Yunzi')\n",
      "('Tony', 'Celine', 'Sophie', 'Yunzi', 'Jason')\n",
      "('Tony', 'Celine', 'Jason', 'Sophie', 'Yunzi')\n",
      "('Tony', 'Celine', 'Jason', 'Yunzi', 'Sophie')\n",
      "('Tony', 'Celine', 'Yunzi', 'Sophie', 'Jason')\n",
      "('Tony', 'Celine', 'Yunzi', 'Jason', 'Sophie')\n",
      "('Jason', 'Sophie', 'Tony', 'Yunzi', 'Celine')\n",
      "('Jason', 'Sophie', 'Tony', 'Celine', 'Yunzi')\n",
      "('Jason', 'Sophie', 'Yunzi', 'Tony', 'Celine')\n",
      "('Jason', 'Sophie', 'Yunzi', 'Celine', 'Tony')\n",
      "('Jason', 'Sophie', 'Celine', 'Tony', 'Yunzi')\n",
      "('Jason', 'Sophie', 'Celine', 'Yunzi', 'Tony')\n",
      "('Jason', 'Tony', 'Sophie', 'Yunzi', 'Celine')\n",
      "('Jason', 'Tony', 'Sophie', 'Celine', 'Yunzi')\n",
      "('Jason', 'Tony', 'Yunzi', 'Sophie', 'Celine')\n",
      "('Jason', 'Tony', 'Yunzi', 'Celine', 'Sophie')\n",
      "('Jason', 'Tony', 'Celine', 'Sophie', 'Yunzi')\n",
      "('Jason', 'Tony', 'Celine', 'Yunzi', 'Sophie')\n",
      "('Jason', 'Yunzi', 'Sophie', 'Tony', 'Celine')\n",
      "('Jason', 'Yunzi', 'Sophie', 'Celine', 'Tony')\n",
      "('Jason', 'Yunzi', 'Tony', 'Sophie', 'Celine')\n",
      "('Jason', 'Yunzi', 'Tony', 'Celine', 'Sophie')\n",
      "('Jason', 'Yunzi', 'Celine', 'Sophie', 'Tony')\n",
      "('Jason', 'Yunzi', 'Celine', 'Tony', 'Sophie')\n",
      "('Jason', 'Celine', 'Sophie', 'Tony', 'Yunzi')\n",
      "('Jason', 'Celine', 'Sophie', 'Yunzi', 'Tony')\n",
      "('Jason', 'Celine', 'Tony', 'Sophie', 'Yunzi')\n",
      "('Jason', 'Celine', 'Tony', 'Yunzi', 'Sophie')\n",
      "('Jason', 'Celine', 'Yunzi', 'Sophie', 'Tony')\n",
      "('Jason', 'Celine', 'Yunzi', 'Tony', 'Sophie')\n",
      "('Yunzi', 'Sophie', 'Tony', 'Jason', 'Celine')\n",
      "('Yunzi', 'Sophie', 'Tony', 'Celine', 'Jason')\n",
      "('Yunzi', 'Sophie', 'Jason', 'Tony', 'Celine')\n",
      "('Yunzi', 'Sophie', 'Jason', 'Celine', 'Tony')\n",
      "('Yunzi', 'Sophie', 'Celine', 'Tony', 'Jason')\n",
      "('Yunzi', 'Sophie', 'Celine', 'Jason', 'Tony')\n",
      "('Yunzi', 'Tony', 'Sophie', 'Jason', 'Celine')\n",
      "('Yunzi', 'Tony', 'Sophie', 'Celine', 'Jason')\n",
      "('Yunzi', 'Tony', 'Jason', 'Sophie', 'Celine')\n",
      "('Yunzi', 'Tony', 'Jason', 'Celine', 'Sophie')\n",
      "('Yunzi', 'Tony', 'Celine', 'Sophie', 'Jason')\n",
      "('Yunzi', 'Tony', 'Celine', 'Jason', 'Sophie')\n",
      "('Yunzi', 'Jason', 'Sophie', 'Tony', 'Celine')\n",
      "('Yunzi', 'Jason', 'Sophie', 'Celine', 'Tony')\n",
      "('Yunzi', 'Jason', 'Tony', 'Sophie', 'Celine')\n",
      "('Yunzi', 'Jason', 'Tony', 'Celine', 'Sophie')\n",
      "('Yunzi', 'Jason', 'Celine', 'Sophie', 'Tony')\n",
      "('Yunzi', 'Jason', 'Celine', 'Tony', 'Sophie')\n",
      "('Yunzi', 'Celine', 'Sophie', 'Tony', 'Jason')\n",
      "('Yunzi', 'Celine', 'Sophie', 'Jason', 'Tony')\n",
      "('Yunzi', 'Celine', 'Tony', 'Sophie', 'Jason')\n",
      "('Yunzi', 'Celine', 'Tony', 'Jason', 'Sophie')\n",
      "('Yunzi', 'Celine', 'Jason', 'Sophie', 'Tony')\n",
      "('Yunzi', 'Celine', 'Jason', 'Tony', 'Sophie')\n",
      "('Celine', 'Sophie', 'Tony', 'Jason', 'Yunzi')\n",
      "('Celine', 'Sophie', 'Tony', 'Yunzi', 'Jason')\n",
      "('Celine', 'Sophie', 'Jason', 'Tony', 'Yunzi')\n",
      "('Celine', 'Sophie', 'Jason', 'Yunzi', 'Tony')\n",
      "('Celine', 'Sophie', 'Yunzi', 'Tony', 'Jason')\n",
      "('Celine', 'Sophie', 'Yunzi', 'Jason', 'Tony')\n",
      "('Celine', 'Tony', 'Sophie', 'Jason', 'Yunzi')\n",
      "('Celine', 'Tony', 'Sophie', 'Yunzi', 'Jason')\n",
      "('Celine', 'Tony', 'Jason', 'Sophie', 'Yunzi')\n",
      "('Celine', 'Tony', 'Jason', 'Yunzi', 'Sophie')\n",
      "('Celine', 'Tony', 'Yunzi', 'Sophie', 'Jason')\n",
      "('Celine', 'Tony', 'Yunzi', 'Jason', 'Sophie')\n",
      "('Celine', 'Jason', 'Sophie', 'Tony', 'Yunzi')\n",
      "('Celine', 'Jason', 'Sophie', 'Yunzi', 'Tony')\n",
      "('Celine', 'Jason', 'Tony', 'Sophie', 'Yunzi')\n",
      "('Celine', 'Jason', 'Tony', 'Yunzi', 'Sophie')\n",
      "('Celine', 'Jason', 'Yunzi', 'Sophie', 'Tony')\n",
      "('Celine', 'Jason', 'Yunzi', 'Tony', 'Sophie')\n",
      "('Celine', 'Yunzi', 'Sophie', 'Tony', 'Jason')\n",
      "('Celine', 'Yunzi', 'Sophie', 'Jason', 'Tony')\n",
      "('Celine', 'Yunzi', 'Tony', 'Sophie', 'Jason')\n",
      "('Celine', 'Yunzi', 'Tony', 'Jason', 'Sophie')\n",
      "('Celine', 'Yunzi', 'Jason', 'Sophie', 'Tony')\n",
      "('Celine', 'Yunzi', 'Jason', 'Tony', 'Sophie')\n",
      "There are 120 combinations.\n"
     ]
    }
   ],
   "source": [
    "# Use for...in loop\n",
    "classmates = [\"Sophie\", \"Tony\", \"Jason\", \"Yunzi\", \"Celine\"]\n",
    "queues = []\n",
    "n_classmates = len(classmates)\n",
    "queue = []\n",
    "for first in classmates:\n",
    "    for second in classmates:\n",
    "        if second != first:\n",
    "            for third in classmates:\n",
    "                if third != second and third != first:\n",
    "                    for forth in classmates:\n",
    "                        if forth != second and forth != first and forth != third:\n",
    "                            for fifth in classmates:\n",
    "                                if fifth != second and fifth != first and fifth != third and fifth != forth:\n",
    "                                    queue = (first, second, third, forth, fifth)\n",
    "                                    queues. append(queue)\n",
    "                        \n",
    "for queue in queues:\n",
    "    print(queue)\n",
    "    \n",
    "leng = len(queues)\n",
    "print(\"There are {} combinations.\".format(leng))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "e75cb1a1-6ab7-4c22-9fd2-9015110aada8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "('Sophie', 'Tony', 'Jason', 'Yunzi', 'Celine')\n",
      "('Sophie', 'Tony', 'Jason', 'Celine', 'Yunzi')\n",
      "('Sophie', 'Tony', 'Yunzi', 'Jason', 'Celine')\n",
      "('Sophie', 'Tony', 'Yunzi', 'Celine', 'Jason')\n",
      "('Sophie', 'Tony', 'Celine', 'Jason', 'Yunzi')\n",
      "('Sophie', 'Tony', 'Celine', 'Yunzi', 'Jason')\n",
      "('Sophie', 'Jason', 'Tony', 'Yunzi', 'Celine')\n",
      "('Sophie', 'Jason', 'Tony', 'Celine', 'Yunzi')\n",
      "('Sophie', 'Jason', 'Yunzi', 'Tony', 'Celine')\n",
      "('Sophie', 'Jason', 'Yunzi', 'Celine', 'Tony')\n",
      "('Sophie', 'Jason', 'Celine', 'Tony', 'Yunzi')\n",
      "('Sophie', 'Jason', 'Celine', 'Yunzi', 'Tony')\n",
      "('Sophie', 'Yunzi', 'Tony', 'Jason', 'Celine')\n",
      "('Sophie', 'Yunzi', 'Tony', 'Celine', 'Jason')\n",
      "('Sophie', 'Yunzi', 'Jason', 'Tony', 'Celine')\n",
      "('Sophie', 'Yunzi', 'Jason', 'Celine', 'Tony')\n",
      "('Sophie', 'Yunzi', 'Celine', 'Tony', 'Jason')\n",
      "('Sophie', 'Yunzi', 'Celine', 'Jason', 'Tony')\n",
      "('Sophie', 'Celine', 'Tony', 'Jason', 'Yunzi')\n",
      "('Sophie', 'Celine', 'Tony', 'Yunzi', 'Jason')\n",
      "('Sophie', 'Celine', 'Jason', 'Tony', 'Yunzi')\n",
      "('Sophie', 'Celine', 'Jason', 'Yunzi', 'Tony')\n",
      "('Sophie', 'Celine', 'Yunzi', 'Tony', 'Jason')\n",
      "('Sophie', 'Celine', 'Yunzi', 'Jason', 'Tony')\n",
      "('Tony', 'Sophie', 'Jason', 'Yunzi', 'Celine')\n",
      "('Tony', 'Sophie', 'Jason', 'Celine', 'Yunzi')\n",
      "('Tony', 'Sophie', 'Yunzi', 'Jason', 'Celine')\n",
      "('Tony', 'Sophie', 'Yunzi', 'Celine', 'Jason')\n",
      "('Tony', 'Sophie', 'Celine', 'Jason', 'Yunzi')\n",
      "('Tony', 'Sophie', 'Celine', 'Yunzi', 'Jason')\n",
      "('Tony', 'Jason', 'Sophie', 'Yunzi', 'Celine')\n",
      "('Tony', 'Jason', 'Sophie', 'Celine', 'Yunzi')\n",
      "('Tony', 'Jason', 'Yunzi', 'Sophie', 'Celine')\n",
      "('Tony', 'Jason', 'Yunzi', 'Celine', 'Sophie')\n",
      "('Tony', 'Jason', 'Celine', 'Sophie', 'Yunzi')\n",
      "('Tony', 'Jason', 'Celine', 'Yunzi', 'Sophie')\n",
      "('Tony', 'Yunzi', 'Sophie', 'Jason', 'Celine')\n",
      "('Tony', 'Yunzi', 'Sophie', 'Celine', 'Jason')\n",
      "('Tony', 'Yunzi', 'Jason', 'Sophie', 'Celine')\n",
      "('Tony', 'Yunzi', 'Jason', 'Celine', 'Sophie')\n",
      "('Tony', 'Yunzi', 'Celine', 'Sophie', 'Jason')\n",
      "('Tony', 'Yunzi', 'Celine', 'Jason', 'Sophie')\n",
      "('Tony', 'Celine', 'Sophie', 'Jason', 'Yunzi')\n",
      "('Tony', 'Celine', 'Sophie', 'Yunzi', 'Jason')\n",
      "('Tony', 'Celine', 'Jason', 'Sophie', 'Yunzi')\n",
      "('Tony', 'Celine', 'Jason', 'Yunzi', 'Sophie')\n",
      "('Tony', 'Celine', 'Yunzi', 'Sophie', 'Jason')\n",
      "('Tony', 'Celine', 'Yunzi', 'Jason', 'Sophie')\n",
      "('Jason', 'Sophie', 'Tony', 'Yunzi', 'Celine')\n",
      "('Jason', 'Sophie', 'Tony', 'Celine', 'Yunzi')\n",
      "('Jason', 'Sophie', 'Yunzi', 'Tony', 'Celine')\n",
      "('Jason', 'Sophie', 'Yunzi', 'Celine', 'Tony')\n",
      "('Jason', 'Sophie', 'Celine', 'Tony', 'Yunzi')\n",
      "('Jason', 'Sophie', 'Celine', 'Yunzi', 'Tony')\n",
      "('Jason', 'Tony', 'Sophie', 'Yunzi', 'Celine')\n",
      "('Jason', 'Tony', 'Sophie', 'Celine', 'Yunzi')\n",
      "('Jason', 'Tony', 'Yunzi', 'Sophie', 'Celine')\n",
      "('Jason', 'Tony', 'Yunzi', 'Celine', 'Sophie')\n",
      "('Jason', 'Tony', 'Celine', 'Sophie', 'Yunzi')\n",
      "('Jason', 'Tony', 'Celine', 'Yunzi', 'Sophie')\n",
      "('Jason', 'Yunzi', 'Sophie', 'Tony', 'Celine')\n",
      "('Jason', 'Yunzi', 'Sophie', 'Celine', 'Tony')\n",
      "('Jason', 'Yunzi', 'Tony', 'Sophie', 'Celine')\n",
      "('Jason', 'Yunzi', 'Tony', 'Celine', 'Sophie')\n",
      "('Jason', 'Yunzi', 'Celine', 'Sophie', 'Tony')\n",
      "('Jason', 'Yunzi', 'Celine', 'Tony', 'Sophie')\n",
      "('Jason', 'Celine', 'Sophie', 'Tony', 'Yunzi')\n",
      "('Jason', 'Celine', 'Sophie', 'Yunzi', 'Tony')\n",
      "('Jason', 'Celine', 'Tony', 'Sophie', 'Yunzi')\n",
      "('Jason', 'Celine', 'Tony', 'Yunzi', 'Sophie')\n",
      "('Jason', 'Celine', 'Yunzi', 'Sophie', 'Tony')\n",
      "('Jason', 'Celine', 'Yunzi', 'Tony', 'Sophie')\n",
      "('Yunzi', 'Sophie', 'Tony', 'Jason', 'Celine')\n",
      "('Yunzi', 'Sophie', 'Tony', 'Celine', 'Jason')\n",
      "('Yunzi', 'Sophie', 'Jason', 'Tony', 'Celine')\n",
      "('Yunzi', 'Sophie', 'Jason', 'Celine', 'Tony')\n",
      "('Yunzi', 'Sophie', 'Celine', 'Tony', 'Jason')\n",
      "('Yunzi', 'Sophie', 'Celine', 'Jason', 'Tony')\n",
      "('Yunzi', 'Tony', 'Sophie', 'Jason', 'Celine')\n",
      "('Yunzi', 'Tony', 'Sophie', 'Celine', 'Jason')\n",
      "('Yunzi', 'Tony', 'Jason', 'Sophie', 'Celine')\n",
      "('Yunzi', 'Tony', 'Jason', 'Celine', 'Sophie')\n",
      "('Yunzi', 'Tony', 'Celine', 'Sophie', 'Jason')\n",
      "('Yunzi', 'Tony', 'Celine', 'Jason', 'Sophie')\n",
      "('Yunzi', 'Jason', 'Sophie', 'Tony', 'Celine')\n",
      "('Yunzi', 'Jason', 'Sophie', 'Celine', 'Tony')\n",
      "('Yunzi', 'Jason', 'Tony', 'Sophie', 'Celine')\n",
      "('Yunzi', 'Jason', 'Tony', 'Celine', 'Sophie')\n",
      "('Yunzi', 'Jason', 'Celine', 'Sophie', 'Tony')\n",
      "('Yunzi', 'Jason', 'Celine', 'Tony', 'Sophie')\n",
      "('Yunzi', 'Celine', 'Sophie', 'Tony', 'Jason')\n",
      "('Yunzi', 'Celine', 'Sophie', 'Jason', 'Tony')\n",
      "('Yunzi', 'Celine', 'Tony', 'Sophie', 'Jason')\n",
      "('Yunzi', 'Celine', 'Tony', 'Jason', 'Sophie')\n",
      "('Yunzi', 'Celine', 'Jason', 'Sophie', 'Tony')\n",
      "('Yunzi', 'Celine', 'Jason', 'Tony', 'Sophie')\n",
      "('Celine', 'Sophie', 'Tony', 'Jason', 'Yunzi')\n",
      "('Celine', 'Sophie', 'Tony', 'Yunzi', 'Jason')\n",
      "('Celine', 'Sophie', 'Jason', 'Tony', 'Yunzi')\n",
      "('Celine', 'Sophie', 'Jason', 'Yunzi', 'Tony')\n",
      "('Celine', 'Sophie', 'Yunzi', 'Tony', 'Jason')\n",
      "('Celine', 'Sophie', 'Yunzi', 'Jason', 'Tony')\n",
      "('Celine', 'Tony', 'Sophie', 'Jason', 'Yunzi')\n",
      "('Celine', 'Tony', 'Sophie', 'Yunzi', 'Jason')\n",
      "('Celine', 'Tony', 'Jason', 'Sophie', 'Yunzi')\n",
      "('Celine', 'Tony', 'Jason', 'Yunzi', 'Sophie')\n",
      "('Celine', 'Tony', 'Yunzi', 'Sophie', 'Jason')\n",
      "('Celine', 'Tony', 'Yunzi', 'Jason', 'Sophie')\n",
      "('Celine', 'Jason', 'Sophie', 'Tony', 'Yunzi')\n",
      "('Celine', 'Jason', 'Sophie', 'Yunzi', 'Tony')\n",
      "('Celine', 'Jason', 'Tony', 'Sophie', 'Yunzi')\n",
      "('Celine', 'Jason', 'Tony', 'Yunzi', 'Sophie')\n",
      "('Celine', 'Jason', 'Yunzi', 'Sophie', 'Tony')\n",
      "('Celine', 'Jason', 'Yunzi', 'Tony', 'Sophie')\n",
      "('Celine', 'Yunzi', 'Sophie', 'Tony', 'Jason')\n",
      "('Celine', 'Yunzi', 'Sophie', 'Jason', 'Tony')\n",
      "('Celine', 'Yunzi', 'Tony', 'Sophie', 'Jason')\n",
      "('Celine', 'Yunzi', 'Tony', 'Jason', 'Sophie')\n",
      "('Celine', 'Yunzi', 'Jason', 'Sophie', 'Tony')\n",
      "('Celine', 'Yunzi', 'Jason', 'Tony', 'Sophie')\n",
      "120 queues\n"
     ]
    }
   ],
   "source": [
    "# Use method permutations\n",
    "from itertools import permutations\n",
    "classmates = [\"Sophie\", \"Tony\", \"Jason\", \"Yunzi\", \"Celine\"]\n",
    "queues = []\n",
    "candidates = list(permutations(classmates))\n",
    "for candidate in candidates:\n",
    "    queues.append(candidate)\n",
    "\n",
    "for queue in queues:\n",
    "    print(queue, end=\"\\n\")\n",
    "print(\"{} queues\".format(len(queues)))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0cdb6ce3-9281-4dc3-9069-5a536ecc2306",
   "metadata": {},
   "source": [
    "2. Jason, Sophie, Tony, Yunzi四个小朋友分别来自4个不同的家庭。新学期快要开始了，这几个小朋友准备通过一对一视频连线（一次视频只有2个小朋友参与）的方式相互交流整个暑假的生活。如果让每一个小朋友都有机会了解另一位小朋友的暑假情况，请问一共需要多少次视频连线？ 请编程求解。<br>\n",
    "   Jason, Sophie, Tony and Yunzi come from 4 different families. The new semester is about to begin, and these children are going to communicate with each other through one-to-one video meeting (only 2 children at a time). talking about their activities in the summer holidays. How many one-to-one video meetings are required for all the children to know each other's life in the summer holidays?<br>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "a074ae25-3870-404c-99ab-24998d22df8f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "('Sophie', 'Tony')\n",
      "('Sophie', 'Jason')\n",
      "('Sophie', 'Yunzi')\n",
      "('Tony', 'Jason')\n",
      "('Tony', 'Yunzi')\n",
      "('Jason', 'Yunzi')\n",
      "There are 6 video meetings.\n"
     ]
    }
   ],
   "source": [
    "# Solution 1\n",
    "classmates = [\"Sophie\", \"Tony\", \"Jason\", \"Yunzi\"]\n",
    "combinations = []\n",
    "n_classmates = len(classmates)\n",
    "combination = []\n",
    "index = 0\n",
    "while index < n_classmates:\n",
    "    first = classmates[0]\n",
    "    classmates.remove(first)\n",
    "    for second in classmates:\n",
    "        combination = (first, second)\n",
    "        combinations.append(combination)\n",
    "    index += 1        \n",
    "\n",
    "for combination in combinations:\n",
    "    print(combination)\n",
    "print(\"There are {} video meetings.\".format(len(combinations)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "95b554aa-fead-42ba-810c-bbf5b83d3b43",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "('Sophie', 'Tony')\n",
      "('Sophie', 'Jason')\n",
      "('Sophie', 'Yunzi')\n",
      "('Tony', 'Jason')\n",
      "('Tony', 'Yunzi')\n",
      "('Jason', 'Yunzi')\n",
      "There are 6 video meetings.\n"
     ]
    }
   ],
   "source": [
    "# Solution 2\n",
    "classmates = [\"Sophie\", \"Tony\", \"Jason\", \"Yunzi\"]\n",
    "combinations = []\n",
    "n_classmates = len(classmates)\n",
    "combination = []\n",
    "index1 = 0\n",
    "while index1 < n_classmates - 1:\n",
    "    student1 = classmates[index1]\n",
    "    index2 = index1 + 1\n",
    "    while index2 < n_classmates:\n",
    "        student2 = classmates[index2]\n",
    "        combination = (student1, student2)\n",
    "        combinations.append(combination)\n",
    "        index2 += 1\n",
    "        \n",
    "    index1 += 1\n",
    "        \n",
    "for combination in combinations:\n",
    "    print(combination)\n",
    "print(\"There are {} video meetings.\".format(len(combinations)))    "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bb1af42f-8932-420b-af63-4922d056d9f1",
   "metadata": {},
   "source": [
    "3. 用数字\"1,2,3,4\"这4个数字来组成一个**5**位数，其中要求数字1在生成的5位数中出现2次，而其他数字仅出现1次。编程列举出所有符合条件的5位数。<br>\n",
    "\n",
    "   Comose a 5-digit positive integer using the digits: 1,2,3, and 4. Digit 1 should be used twice and other digits should only exist one time. How many 5-digit positive number can be composed?<br>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "36461fb9-8e4e-4633-9cd0-1212e0c8b693",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "60 numbers\n",
      "11234, 11243, 11324, 11342, 11423, 11432, 12134, 12143, 12314, 12341, 12413, 12431, 13124, 13142, 13214, 13241, 13412, 13421, 14123, 14132, 14213, 14231, 14312, 14321, 21134, 21143, 21314, 21341, 21413, 21431, 23114, 23141, 23411, 24113, 24131, 24311, 31124, 31142, 31214, 31241, 31412, 31421, 32114, 32141, 32411, 34112, 34121, 34211, 41123, 41132, 41213, 41231, 41312, 41321, 42113, 42131, 42311, 43112, 43121, 43211, "
     ]
    }
   ],
   "source": [
    "# from itertools import permutations\n",
    "def tuple_to_number(tpl_n):\n",
    "    str_n = \"\"\n",
    "    for n in tpl_n:\n",
    "        str_n += str(n)\n",
    "    return int(str_n)\n",
    "digits = [1, 1, 2, 3, 4]\n",
    "numbers_5_digits = []\n",
    "for digit in digits:\n",
    "    digits_to_build_number = [1, 1, 2, 3, 4]\n",
    "\n",
    "    candidates = list(permutations(digits_to_build_number))\n",
    "    for tpl_num in candidates:\n",
    "        candidate = tuple_to_number(tpl_num)\n",
    "        if candidate not in numbers_5_digits:\n",
    "            numbers_5_digits.append(candidate)\n",
    "\n",
    "print(\"{} numbers\".format(len(numbers_5_digits)))            \n",
    "for number in numbers_5_digits:\n",
    "    print(number, end=\", \")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e0064f95-258e-4413-a302-c406e1ae04d3",
   "metadata": {},
   "source": [
    "4. [**难，选做**]用数字\"1,2,3,4\"这4个数字来组成一个5位数，其中每一个数至少用到1次，一共可以组成多少个5位数，其中最小的和最大的数分别是什么数？<br>\n",
    "\n",
    "   [**hard, optional**]Comose a 5-digit positive integer using the digits 1,2,3, and 4. Each digit should at least be used once. How many 5-digit positive number can be composed? what is the minimal and maximal integer?<br>\n",
    "   \n",
    "   **提示1 Hint1**: `123 = 1*100 + 2*10 + 3*1`  <br>\n",
    "   \n",
    "   **提示2**: 可以使用一个`list`类型的变量，把所有找到的5位数都存放在这个变量中，这个列表型变量的长度就是所有5位数的个数，列表中最大和最小的元素就分别是能形成的最大的和最小的5位数<br>\n",
    "   \n",
    "   **Hint2**： You can use a `list` variable, put all the integers to it, then the length of this variable is the number of all integers. and minimal and maximal elements are the minimal and maximal value of all composed 5-digit integers.<br>\n",
    "   \n",
    "   **Hint3**: Use `permutations` will be much easier. 使用`permutations`方法会比较容易。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "0c4dfc7c-106c-4484-a6b9-d0a9eb65c504",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "240 numbers\n",
      "12341, 12314, 12431, 12413, 12134, 12143, 13241, 13214, 13421, 13412, 13124, 13142, 14231, 14213, 14321, 14312, 14123, 14132, 11234, 11243, 11324, 11342, 11423, 11432, 21341, 21314, 21431, 21413, 21134, 21143, 23141, 23114, 23411, 24131, 24113, 24311, 31241, 31214, 31421, 31412, 31124, 31142, 32141, 32114, 32411, 34121, 34112, 34211, 41231, 41213, 41321, 41312, 41123, 41132, 42131, 42113, 42311, 43121, 43112, 43211, 12342, 12324, 12432, 12423, 12234, 12243, 13242, 13224, 13422, 14232, 14223, 14322, 21342, 21324, 21432, 21423, 21234, 21243, 23142, 23124, 23412, 23421, 23214, 23241, 24132, 24123, 24312, 24321, 24213, 24231, 22134, 22143, 22314, 22341, 22413, 22431, 31242, 31224, 31422, 32142, 32124, 32412, 32421, 32214, 32241, 34122, 34212, 34221, 41232, 41223, 41322, 42132, 42123, 42312, 42321, 42213, 42231, 43122, 43212, 43221, 12343, 12334, 12433, 13243, 13234, 13423, 13432, 13324, 13342, 14233, 14323, 14332, 21343, 21334, 21433, 23143, 23134, 23413, 23431, 23314, 23341, 24133, 24313, 24331, 31243, 31234, 31423, 31432, 31324, 31342, 32143, 32134, 32413, 32431, 32314, 32341, 34123, 34132, 34213, 34231, 34312, 34321, 33124, 33142, 33214, 33241, 33412, 33421, 41233, 41323, 41332, 42133, 42313, 42331, 43123, 43132, 43213, 43231, 43312, 43321, 12344, 12434, 12443, 13244, 13424, 13442, 14234, 14243, 14324, 14342, 14423, 14432, 21344, 21434, 21443, 23144, 23414, 23441, 24134, 24143, 24314, 24341, 24413, 24431, 31244, 31424, 31442, 32144, 32414, 32441, 34124, 34142, 34214, 34241, 34412, 34421, 41234, 41243, 41324, 41342, 41423, 41432, 42134, 42143, 42314, 42341, 42413, 42431, 43124, 43142, 43214, 43241, 43412, 43421, 44123, 44132, 44213, 44231, 44312, 44321, "
     ]
    }
   ],
   "source": [
    "from itertools import permutations\n",
    "def tuple_to_number(tpl_n):\n",
    "    str_n = \"\"\n",
    "    for n in tpl_n:\n",
    "        str_n += str(n)\n",
    "    return int(str_n)\n",
    "digits = [1, 2, 3, 4]\n",
    "numbers_5_digits = []\n",
    "for digit in digits:\n",
    "    digits_to_build_number = [1, 2, 3, 4]\n",
    "    digits_to_build_number.append(digit)\n",
    "\n",
    "    candidates = list(permutations(digits_to_build_number))\n",
    "    for tpl_num in candidates:\n",
    "        candidate = tuple_to_number(tpl_num)\n",
    "        if candidate not in numbers_5_digits:\n",
    "            numbers_5_digits.append(candidate)\n",
    "\n",
    "print(\"{} numbers\".format(len(numbers_5_digits)))\n",
    "for number in numbers_5_digits:\n",
    "    print(number, end=\", \")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9b923b06-b6a8-4108-b9eb-f501c7759df6",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
