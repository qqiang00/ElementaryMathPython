{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "relative-location",
   "metadata": {},
   "source": [
    "## 第19讲 重新认识矩形"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "digital-consensus",
   "metadata": {
    "heading_collapsed": true
   },
   "source": [
    "### Assignments 作业"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ef673673-61f6-4473-a728-0b5a0e185900",
   "metadata": {
    "hidden": true
   },
   "source": [
    "1. 熟悉`prepare_paper`方法：导入`qianglib.py`，调用`prepare_paper`方法，修改该方法接受的参数值，使得`scale`值分别为10和50，min_x分别为0，10，min_y分别为0, 20，组合不同的这些参数值调用该方法。观察绘制出的方格值有什么变化，从中试图小结个该方法这些参数的意义。\n",
    "   Your Answer:\n",
    "   1. scale的意义:\n",
    "   2. min_x的意义:\n",
    "   3. min_y的意义:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c6d6e0c8-2a12-44e9-b464-11c4201a4d83",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 你需要预先从turtle和qianglib库中导入需要的方法\n",
    "weight, height = 800, 600\n",
    "setup(weight, height, 0, 0)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3b1feecc-b74f-4027-8793-939f6d3456be",
   "metadata": {},
   "outputs": [],
   "source": [
    "prepare_paper(width, height, scale=10, min_x=0, min_y=0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "512988f9-02eb-491f-8e3e-ace37de7d4de",
   "metadata": {},
   "outputs": [],
   "source": [
    "prepare_paper(width, height, scale=10, min_x=0, min_y=20, max_y=25)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "dc49d01a-4331-4767-b5a7-9f9f0bd44684",
   "metadata": {},
   "outputs": [],
   "source": [
    "prepare_paper(width, height, scale=10, min_x=10, min_y=0, max_y=25)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "bd229fae-0059-4dbf-9578-ec5b7e06edb9",
   "metadata": {},
   "outputs": [],
   "source": [
    "prepare_paper(width, height, scale=10, min_x=10, min_y=20, max_y=25)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6f756614-8a9f-4ec8-a2eb-94584d2ebd47",
   "metadata": {},
   "outputs": [],
   "source": [
    "prepare_paper(width, height, scale=50, min_x=0, min_y=0, max_y=25)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "241e893e-be01-4ac6-b672-f365ed7a05d8",
   "metadata": {},
   "outputs": [],
   "source": [
    "prepare_paper(width, height, scale=50, min_x=0, min_y=20, max_y=25)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0f605bd7-85a1-4686-874b-e890e231ae8d",
   "metadata": {},
   "outputs": [],
   "source": [
    "prepare_paper(width, height, scale=50, min_x=10, min_y=0, max_y=25)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ee8de6ca-4ad5-428c-8b45-5ae30c85eb6d",
   "metadata": {},
   "outputs": [],
   "source": [
    "prepare_paper(width, height, scale=50, min_x=10, min_y=20, max_y=25)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3b78f576-e7f7-4310-af74-9b1f391074b2",
   "metadata": {},
   "source": [
    " 2. 使用本讲示例的代码调出绘图纸。下面以供给出了5组数据，每一组数据包括两个点的坐标。 对于每一组数据：\n",
    "    1. 请在绘图纸上使用`qianglib`中的`mark`方法标记这两个点，\n",
    "    2. 用`qianglib`方法中的`line`方法连接这两个点成一条线段。\n",
    "    3. 手工找到线段的中点，用`mark`方法标记该中点。\n",
    "    \n",
    "    以端点坐标表示的线段\n",
    "    1. (0, 0)和(20, 0)\n",
    "    2. (0, 0)和(0,16)\n",
    "    3. (0, 0)和(20, 16)\n",
    "    4. (10, 20)和(30, 20)\n",
    "    5. (10, 20)和(35, 25)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9a2f8169-d9d4-4097-91e1-8fc8f741e2da",
   "metadata": {},
   "outputs": [],
   "source": [
    "# A.\n",
    "points = [(0, 0), (20, 0)]\n",
    "for point in points:\n",
    "    mark(point, info=str(point))\n",
    "    \n",
    "center = (10, 0)\n",
    "mark(center, info=str(center))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "08f8a10a-6fdc-4f80-aee1-a9bf6d558301",
   "metadata": {},
   "outputs": [],
   "source": [
    "# B.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "307cba79-92a3-48e8-b3c4-e68904ca41d0",
   "metadata": {},
   "outputs": [],
   "source": [
    "# E. \n",
    "points = [(10, 20), (35, 25)]\n",
    "for point in points:\n",
    "    mark(point, info=str(point))\n",
    "    \n",
    "center = (25, 22)\n",
    "mark(center, info=str(center))\n",
    "line(points[0], center)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e6477577-2e55-4aab-b243-4cce04bcc0ee",
   "metadata": {},
   "outputs": [],
   "source": [
    "line(center, points[1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "106d8a9b-3e0e-4c89-9719-8f9a6fdb49d9",
   "metadata": {},
   "outputs": [],
   "source": [
    "line(points[0], points[1])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "21e80d96-b358-46ae-9336-f0e4eb6b33c2",
   "metadata": {},
   "source": [
    "3. 以上一题为参考，编写一个方法专门计算一条线段中点的坐标，这条线段以两个点的坐标的形式给出，方法返回线段中点的坐标。该方法的定义如下，请完整的实现该方法。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "10b8f686-82c1-4116-9b6c-65907b5e3294",
   "metadata": {},
   "outputs": [],
   "source": [
    "def line_center(point1, point2):  # point1, poit2 format of (x1, y1)\n",
    "    # center = None\n",
    "    # TODO: add your codes here\n",
    "    x1, y1 = point1\n",
    "    x2, y2 = point2\n",
    "    print(\"x1:{}, y1:{}\".format(x1, y1))\n",
    "    print(\"x2:{}, y2:{}\".format(x2, y2))\n",
    "    \n",
    "    center_x = (x1 + x2)/2\n",
    "    center_y = (y1 + y2)/2\n",
    "    print(\"center x: {}, y:{}\".format(center_x, center_y))\n",
    "    center = (center_x, center_y)\n",
    "    return center                 "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ef679aa2-429d-4197-9505-6c4033bebc39",
   "metadata": {},
   "outputs": [],
   "source": [
    "def line_center2(point1, point2):\n",
    "    return ((point1[0]+point2[0])/2, (point1[1] + point2[1])/2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e45847a6-0c86-4ac6-9f34-cf70bc3d28fa",
   "metadata": {},
   "outputs": [],
   "source": [
    "C = line_center(A, B) # C is center of line AB"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "008702bf-46f0-45b2-ad60-627c5af96769",
   "metadata": {},
   "outputs": [],
   "source": [
    "mark(C, info=\"C\", color=\"blue\", size=10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "cb6aefd3-ca62-4662-bc2d-6411d7676174",
   "metadata": {},
   "outputs": [],
   "source": [
    "D = line_center2(A, B)\n",
    "print(D)\n",
    "mark(D, info=\"D\", color=\"black\", size=10)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e1c3fcb0-2e0d-4f3f-9f4a-82d2b12ac5b1",
   "metadata": {},
   "source": [
    "4. find tow points on a line that divide the line into 3 equal parts."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "742ccf95-694c-45fc-803f-87c32afdcbd3",
   "metadata": {},
   "outputs": [],
   "source": [
    "from turtle import setup, reset, pu, pd, bye, left, right, fd, bk, screensize\n",
    "from turtle import goto, seth, write, ht, st, home, dot, pen, speed\n",
    "from qianglib import prepare_paper, draw_grid, mark, lines, line, polygon, text"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "4a7e5363-e4bd-4c5e-bea0-9dbf5a859964",
   "metadata": {},
   "outputs": [],
   "source": [
    "width, height = 800, 600\n",
    "setup(width, height, 0, 0)\n",
    "prepare_paper(width, height, scale=20, min_x=0, min_y=0, max_y=25)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "9d870abd-2e42-4584-b1c7-adff681f719e",
   "metadata": {},
   "outputs": [],
   "source": [
    "A = (10, 12)\n",
    "B = (25, 21)\n",
    "mark(A, info=\"A(10, 12)\")\n",
    "mark(B, info=\"B(25, 21)\")\n",
    "line(A, B)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "3e841cab-7197-4171-a993-b8f900dc3bde",
   "metadata": {},
   "outputs": [],
   "source": [
    "def three_equal_division(point1, point2):\n",
    "    x1, y1 = point1\n",
    "    x2, y2 = point2\n",
    "    x_step = (x2 - x1)/3\n",
    "    y_step = (y2 - y1)/3\n",
    "    x3, y3 = x1 + x_step, y1 + y_step\n",
    "    x4, y4 = x2 - x_step, y2 - y_step\n",
    "    point3 = (x3, y3)\n",
    "    point4 = (x4, y4)\n",
    "    return [point3, point4]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "090d608a-3225-4f38-a973-d3e089d0b5a1",
   "metadata": {},
   "outputs": [],
   "source": [
    "result_list = three_equal_division(A, B)\n",
    "E = result_list[0]\n",
    "F = result_list[1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "00170721-50fc-474b-8b42-e233b8e7dc83",
   "metadata": {},
   "outputs": [],
   "source": [
    "mark(E)\n",
    "mark(F)\n",
    "line(A, E, color=\"yellow\", linewidth=5)\n",
    "line(E, F, color=\"red\", linewidth=5)\n",
    "line(F, B, color=\"blue\", linewidth=5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "4055a702-f1f7-4a88-a0b8-9e5b7ef8aab0",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Example 2\n",
    "P1 = (10, 5)\n",
    "P2 = (25, 5)\n",
    "mark(P1)\n",
    "mark(P2)\n",
    "result_list = three_equal_division(P1, P2)\n",
    "P3, P4 = result_list[0], result_list[1]\n",
    "line(P1, P3, color=\"yellow\")\n",
    "line(P3, P4, color=\"red\")\n",
    "line(P4, P2, color=\"blue\")\n",
    "mark(P3, \"P3(15, 5)\")\n",
    "mark(P4, \"P4(20, 5)\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "63d3ea0b-4674-4844-9fbd-092b7f0ba9ea",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "88a1fd3a-4665-4d3b-a3ef-0fb729eaa05e",
   "metadata": {},
   "outputs": [],
   "source": [
    "P5 = (5, 12)\n",
    "P6 = (5, 21)\n",
    "result_list = three_equal_division(P5, P6)\n",
    "P7, P8 = result_list[0], result_list[1]\n",
    "\n",
    "line(P5, P7, color=\"yellow\")\n",
    "line(P7, P8, color=\"red\")\n",
    "line(P8, P6, color=\"blue\")\n",
    "mark(P5)\n",
    "mark(P6)\n",
    "mark(P7)\n",
    "mark(P8)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6183a6a6-209c-492c-8f99-5a77a6c12b51",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
