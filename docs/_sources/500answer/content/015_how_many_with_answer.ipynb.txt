{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "relative-location",
   "metadata": {},
   "source": [
    "## 第15讲 编写方法绘制线段"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d12f05dd",
   "metadata": {},
   "source": [
    "### Problem 问题描述"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c7cd1f0b-8266-49f3-a77e-806bec2c40ce",
   "metadata": {},
   "source": [
    "数轴上有6个点，对应的数字分别为`[-4.5, -2.0, 0, 1.5, 3.5, 5.0]`。连接其中任意的两个点可以形成一条线段。请问这6个点一共可形成多少条线段？参照下图，在宽高分别为600和400的绘图区绘制一条数轴，在数轴上标记这些点，并用不同颜色绘制出这6个点能形成的所有的线段并给每条线段标记一个序号。为避免绘制出的线段相互重合，每条线段间隔10个像素。图中已经绘制出了从`-4.5`开始到所有其它点的线段。\n",
    "\n",
    "下面的代码已经完成了数轴绘制和对每一个点的标记。\n",
    "\n",
    "<img src=\"figures/L015_draw_all_lines.png\" width=\"600px\"/>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ac95c512-72bf-4b51-a579-4a375b029bd3",
   "metadata": {},
   "outputs": [],
   "source": [
    "from turtle import setup, reset, pu, pd, bye, left, right, fd, bk, screensize\n",
    "from turtle import goto, seth, write, ht, st, home, pen, dot\n",
    "\n",
    "nums = [-4.5, -2.0, 0, 1.5, 3.5, 5.0]\n",
    "colors = [\"orange\", \"black\", \"red\",  \"green\", \"blue\"]\n",
    "SCALE = 50\n",
    "width, height = 600, 400   # 窗口的宽度和高度（单位为：像素）\n",
    "setup(width, height, 0, 0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d9b104fc-524c-426b-bd99-bb1acb926c01",
   "metadata": {},
   "outputs": [],
   "source": [
    "from qianglib import draw_axis, mark\n",
    "reset()\n",
    "draw_axis(width, height, SCALE)\n",
    "nums = [-4.5, -2.0, 0, 1.5, 3.5, 5.0]\n",
    "colors = [\"orange\", \"black\", \"red\",  \"green\", \"blue\"]\n",
    "i = 0\n",
    "n_colors = len(colors)\n",
    "while i < len(nums):\n",
    "    mark(nums[i], size=5, color=colors[i % n_colors])\n",
    "    i += 1"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "animated-batch",
   "metadata": {},
   "source": [
    "### Math Background 数学背景\n",
    "\n",
    "1. 简单的排列组合"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "sorted-furniture",
   "metadata": {
    "heading_collapsed": true
   },
   "source": [
    "### Prerequisites 预备知识\n",
    "\n",
    "#### 1. 排列和组合\n",
    "\n",
    "- 5个小朋友Jason, Sophie, Tony, Yunzi, Celine按从前到后的次序排成一个纵队，可以排成多少个不一样的队伍？\n",
    "- 从同样5个小朋友中抽出4个小朋友出来玩一个四人游戏，剩下的1个小朋友不参与游戏。有多少种抽取小朋友组建队伍的方法。\n",
    "- 从同样5个小朋友中抽出3个小朋友出来玩一个三人游戏，剩下的2个小朋友在一起玩另一个二人游戏，一共有多少种分组的方法。玩游戏的分组不考虑次序。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "824c140c-4d86-4fc5-8753-f0fd8aa00cf2",
   "metadata": {},
   "outputs": [],
   "source": [
    "classmates = [\"Jason\", \"Sophie\", \"Tony\", \"Yunzi\", \"Celine\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8ead47cb-2dc9-46d0-b137-f82e8b157b68",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Tony 120\n",
    "1*2*3*4*5"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ebc5e2b6-afeb-4333-a5f8-991c5ea6a8fa",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Sophie 15\n",
    "1+2+3+4+5"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ba6315c2-0b23-4c8e-8384-2a121d6228ca",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4bc01cc8-0b19-442c-9214-6d8faee85977",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Yunzi 10\n",
    "1+2+3+4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b88a930d-70f8-424c-902c-359c62430171",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Jason 480"
   ]
  },
  {
   "cell_type": "raw",
   "id": "e45dec73-0a32-4486-ad18-6edca46868a6",
   "metadata": {},
   "source": [
    "# No. Person 1: Jason 1 *\n",
    "1. Jason\n",
    "\n",
    "# No. Person 2: Jason, Sophie 2 * 1\n",
    "1. Jason Sophie\n",
    "2. Sophie Jason\n",
    "\n",
    "# No. Jason, Sophie, Tony  3 * 2 = 3 * 2 * 1 = 6\n",
    "1. Jason Sophie Tony\n",
    "2. Jason Tony Sohie\n",
    "3. Sophie Jason Tony\n",
    "4. Tony Sophie Jason\n",
    "5. Sophie Tony Jason\n",
    "6. Tony Jason Sophie\n",
    "7. ... ?\n",
    "\n",
    "# Jason Sophie Tony Yunzi 4 * 6 = 4 * 3 * 2 * 1 = 24\n",
    "Y J T S\n",
    "Y J S T\n",
    "Y S T J\n",
    "Y S J T\n",
    "Y T S J\n",
    "Y T J S\n",
    "\n",
    "J Y T S \n",
    "  Y\n",
    "  Y\n",
    "  Y\n",
    "  Y\n",
    "  Y\n",
    "    \n",
    "...\n",
    "\n",
    "# Jason Sophie Tony Yunzi Celine    5 * 24 = 5 * 4 * 3 * 2 * 1 = 120\n",
    "\n",
    "# No. 6:     6 * 120 = ... = 720"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "968340c2-789e-40e8-99b5-7a8fbb1234f5",
   "metadata": {},
   "source": [
    "##### **math Factorial 阶乘**\n",
    "- P1 = 1 = 1!\n",
    "- P2 = 2 * 1 = 2!\n",
    "- P3 = 3 * 2 * 1 = 3 * ( 2 * 1 ) = 3 * P2 = 3!\n",
    "- P4 = 4 * 3 * 2 * 1 = 4 * (3 * 2 * 1) = 4 * P3 = 4!\n",
    "- P5 = 5 * 4 * 3 * 2 * 1 = 5!\n",
    "- ...\n",
    "- Pn = n * (n-1) * (n-2) * ... * 2 * 1 = n!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "f7e98eb8-63a6-4410-aff3-d3bbdd366d7b",
   "metadata": {},
   "outputs": [],
   "source": [
    "def cal_num_queue(num_person):\n",
    "    #result = 1 * 2 * 3 * 4 * ... * num_person\n",
    "    result, factor = 1, 1\n",
    "    while factor <= num_person:\n",
    "        result = factor * result\n",
    "        factor += 1\n",
    "        #print(\"result: {}, factor: {}\".format(result, factor))\n",
    "        \n",
    "    print(\"There are {} queues altogether, if number of person is {}\".format\\\n",
    "          (result, num_person))\n",
    "    return"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "c946c887-ee07-41f2-bafe-cfcae2d73dfa",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "There are 720 queues altogether, if number of person is 6\n"
     ]
    }
   ],
   "source": [
    "cal_num_queue(6)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a0bfc9d7-56e5-447f-b5dc-2adba1e0e38f",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "c12628ec-4144-4467-9077-45c72f37e56f",
   "metadata": {},
   "source": [
    "##### **List all queue options 列出排队的所有可能性**\n",
    "\n",
    "for 3 classmates: \"Jason\", \"Sophie\", \"Tony\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "bddf82d7-12fc-495d-b69f-a07bc2ef80d6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "('Jason', 'Sophie', 'Tony')\n",
      "('Jason', 'Tony', 'Sophie')\n",
      "('Sophie', 'Jason', 'Tony')\n",
      "('Sophie', 'Tony', 'Jason')\n",
      "('Tony', 'Jason', 'Sophie')\n",
      "['Tony', 'Sophie', 'Jason']\n"
     ]
    }
   ],
   "source": [
    "classmates = [\"Jason\", \"Sophie\", \"Tony\"]\n",
    "queues = []          # store all the queues generated 保存所有生成的队伍 \n",
    "n_classmates = len(classmates)\n",
    "first, second, third = None, None, None\n",
    "\n",
    "first, second, third = \"Jason\", \"Sophie\", \"Tony\"\n",
    "queues.append((first, second, third))\n",
    "\n",
    "first, second, third = \"Jason\", \"Tony\", \"Sophie\"\n",
    "queues.append((first, second, third))\n",
    "\n",
    "first, second, third = \"Sophie\", \"Jason\", \"Tony\"\n",
    "queues.append((first, second, third))\n",
    "\n",
    "first, second, third = \"Sophie\", \"Tony\", \"Jason\"\n",
    "queues.append((first, second, third))\n",
    "\n",
    "first, second, third = \"Tony\", \"Jason\", \"Sophie\"\n",
    "queues.append((first, second, third))\n",
    "\n",
    "first, second, third = \"Tony\", \"Sophie\", \"Jason\"\n",
    "queues.append( (first, second, third) )  # tuple, \n",
    "\n",
    "for q in queues:\n",
    "    print(q)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "ce7ce5e2-9e52-4c90-9b43-bfcb7486f8a2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "('Jason', 'Sophie', 'Tony')\n",
      "('Jason', 'Tony', 'Sophie')\n",
      "('Sophie', 'Jason', 'Tony')\n",
      "('Sophie', 'Tony', 'Jason')\n",
      "('Tony', 'Jason', 'Sophie')\n",
      "('Tony', 'Sophie', 'Jason')\n"
     ]
    }
   ],
   "source": [
    "classmates = [\"Jason\", \"Sophie\", \"Tony\", \"Yunzi\", \"Celine\"]\n",
    "queues = []          # store all the queues generated 保存所有生成的队伍 \n",
    "queue = None         # build q queue to store all the classmates \"Jason\", \"Tony\"\n",
    "                     # 声明一个队伍变量，存放一个可能的排队形式\n",
    "for first in classmates:\n",
    "    for second in classmates:\n",
    "        if second != first:\n",
    "            for third in classmates:\n",
    "                if third != first and third != second:\n",
    "                    queue = (first, second, third)  # find a queue 找到一个队伍\n",
    "                    queues.append(queue)       # append this queue to queues\n",
    "                                               # 把找到的队伍放到队伍列表里\n",
    "                    \n",
    "for queue in queues:\n",
    "    print(queue)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "18c4f4c9-436d-4b09-be20-a6178a3c43fa",
   "metadata": {},
   "outputs": [],
   "source": [
    "classmates = [\"Jason\", \"Sophie\", \"Tony\", \"Yunzi\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e0d4e440-9a07-4d49-a0aa-45da44e29039",
   "metadata": {},
   "outputs": [],
   "source": [
    "classmates = [\"Jason\", \"Sophie\", \"Tony\", \"Yunzi\", \"Celine\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8ecdb2f6-66ad-4c2f-91ff-6bba8df053eb",
   "metadata": {},
   "outputs": [],
   "source": [
    "# use while loop"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "69992ee6-a9e0-4a03-ab6a-ca169c1c4116",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "6e461421-f6a2-4435-9372-da115e62ded6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "('Jason', 'Sophie', 'Tony')\n",
      "('Jason', 'Tony', 'Sophie')\n",
      "('Sophie', 'Jason', 'Tony')\n",
      "('Sophie', 'Tony', 'Jason')\n",
      "('Tony', 'Jason', 'Sophie')\n",
      "('Tony', 'Sophie', 'Jason')\n"
     ]
    }
   ],
   "source": [
    "results = []\n",
    "i, j, k = 0, 0, 0\n",
    "n_classmates = len(classmates)\n",
    "first, second, third = None, None, None\n",
    "while i < n_classmates:\n",
    "    first = classmates[i]\n",
    "    j = 0\n",
    "    while j < n_classmates:\n",
    "        if j != i:\n",
    "            second = classmates[j]\n",
    "            k = 0\n",
    "            while k < n_classmates:\n",
    "                if k != i and k != j:\n",
    "                    third = classmates[k]\n",
    "                    queue = (first, second, third)\n",
    "                    print(perm)\n",
    "                    results.append(perm)\n",
    "                k += 1\n",
    "        j += 1\n",
    "    i += 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "047fdd19-8bf8-4543-87db-0c3fe4e429b8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "('Jason', 'Sophie', 'Tony')\n",
      "('Jason', 'Tony', 'Sophie')\n",
      "('Sophie', 'Jason', 'Tony')\n",
      "('Sophie', 'Tony', 'Jason')\n",
      "('Tony', 'Jason', 'Sophie')\n",
      "('Tony', 'Sophie', 'Jason')\n"
     ]
    }
   ],
   "source": [
    "classmates = [\"Jason\", \"Sophie\", \"Tony\"]\n",
    "from itertools import permutations\n",
    "perms = permutations(classmates)\n",
    "perms = list(perms)\n",
    "i = 0\n",
    "while i < len(perms):\n",
    "    print(perms[i])\n",
    "    i += 1"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6b3b033d-c2ac-4986-b180-c2906797da03",
   "metadata": {},
   "source": [
    "##### **Compare `for` and `while` loop**\n",
    "\n",
    "1. for 比较简单, 不需要设置一个临时变量，也不需要条件表达式；while需要条件表达式（外加一个临时变量）\n",
    "2. for 针对的是一个list(可迭代对象), while循环可以没有list\n",
    "3. while 需要内部需要改变变量的值已继续判断是否符合循环条件, for不需要\n",
    "4. ..."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "2bf1a8f1-5e9a-4b14-b7f9-46dd6e4d521b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5050\n"
     ]
    }
   ],
   "source": [
    "# 1+2+3+4+ ... +100 = ?\n",
    "# while loop\n",
    "start, result = 1, 0\n",
    "while start <= 100:\n",
    "    result += start\n",
    "    start += 1\n",
    "    \n",
    "print(result)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "3e69b5a7-725e-400f-9d69-a5809a6783d3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]\n",
      "5050\n"
     ]
    }
   ],
   "source": [
    "# for loop\n",
    "result = 0\n",
    "nums = list(range(1, 101))\n",
    "for num in nums:\n",
    "    result += num\n",
    "\n",
    "print(result)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "81cc5333-e955-499c-b413-ee8ce8236d37",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "range(1, 101) <class 'range'>\n"
     ]
    }
   ],
   "source": [
    "print(range(1, 101), type(range(1, 101)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "abf305dc-f5ce-4408-9e19-edc629b09cd8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100] <class 'list'>\n"
     ]
    }
   ],
   "source": [
    "print(list(range(1, 101)), type(list(range(1, 101))))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "94538b78-a7c3-4022-a69f-11b31cb5143b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100] <class 'list'>\n"
     ]
    }
   ],
   "source": [
    "print(  list(range(1, 101))  , type(list(range(1, 101)))   )"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3c324110-7474-4806-b2cb-0f447959b725",
   "metadata": {},
   "source": [
    "##### **Practice `range`**\n",
    " range(start, stop[, step])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "79eb6b74-941c-4a93-a883-32599d046901",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n"
     ]
    }
   ],
   "source": [
    "nums = list(range(10))    # start: 0, stop: 10, step 1\n",
    "print(nums)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "3946e775-b2a2-4483-a0ea-09cbcfd30b63",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[5, 6, 7, 8, 9]\n"
     ]
    }
   ],
   "source": [
    "nums = list(range(5, 10)) # start: 5, stop: 10, step 1\n",
    "print(nums)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "d7d23852-6151-45b0-8b82-62495d7e6a6d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0, 2, 4, 6, 8]\n"
     ]
    }
   ],
   "source": [
    "nums = list(range(0, 10, 2))\n",
    "print(nums)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "43e0505a-6c75-481c-8e07-b3965b0b07f0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0, 3, 6, 9]\n"
     ]
    }
   ],
   "source": [
    "nums = list(range(0, 10, 3))\n",
    "print(nums)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "c8bd90e0-7b55-4600-80c6-ab70739c537b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0]\n"
     ]
    }
   ],
   "source": [
    "nums = list(range(0, 3, 10))\n",
    "print(nums)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "01f4d941-bfb4-445a-a52a-5ee0cdd0d4b0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[]\n"
     ]
    }
   ],
   "source": [
    "nums = list(range(0, 0))\n",
    "print(nums)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "4dc196dd-7c70-4e59-87ab-8533404836f4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[]\n"
     ]
    }
   ],
   "source": [
    "nums = list(range(0, 10, -2))\n",
    "print(nums)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "40e7964c-67a6-439f-8d6a-398d7fdf25e2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[]\n"
     ]
    }
   ],
   "source": [
    "nums = list(range(10, 0))\n",
    "print(nums)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "6fa8100f-c7a3-47fe-acd9-eff7bc190d15",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[10, 9, 8, 7, 6, 5, 4, 3, 2, 1]\n"
     ]
    }
   ],
   "source": [
    "nums = list(range(10, 0, -1))      # start: 10, stop: 0, step = -1\n",
    "print(nums)\n",
    "\n",
    "# Yunzi: []\n",
    "# Sophie: [10, 9, ... , 1]\n",
    "# Tony:  same as Sophie\n",
    "# Jason: same as Sophie"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "1f5c2df9-b3b6-4ba6-9966-ce29b160859d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[10, 8, 6, 4, 2]\n"
     ]
    }
   ],
   "source": [
    "nums = list(range(10, 0, -2))      # start: 10, stop: 0, step = -2\n",
    "print(nums)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4b4635ed-20fb-4a14-ad86-2c29baee5c00",
   "metadata": {},
   "source": [
    "##### 编写自己的range方法，让stop表示的值包括在列表里\n",
    "\n",
    "yunzi_range(start, stop[,step])       # stop 是可以包括在, step always >= 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "6f304ea1-0a6c-4bf3-9afe-274ee3a9eb09",
   "metadata": {},
   "outputs": [],
   "source": [
    "def qrange(start, stop, step):\n",
    "    nums = list(range(start, stop + 1, step))\n",
    "    # TODO: 修改上面的None\n",
    "    print(nums)\n",
    "    return"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "dc729e81-2cd3-4ae7-b87a-4daaceb5e931",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n",
      "[1, 4, 7, 10]\n",
      "[1, 4, 7, 10]\n"
     ]
    }
   ],
   "source": [
    "qrange(1, 10, 1)    # [1, 2, 3, ..., 10]  include 10  stop num\n",
    "qrange(1, 10, 3)    # [1, 4, 7, 10]\n",
    "qrange(1, 11, 3)    # [1, 4, 7, 10]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "bf838c14-09b1-4216-8445-bd9f6dee5748",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n"
     ]
    }
   ],
   "source": [
    "list(qrange(1, 10, 1))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "902a4a7e-2e7c-4221-b597-41d9b08f9f85",
   "metadata": {},
   "outputs": [],
   "source": [
    "# version 2\n",
    "def qrange2(start, stop, step):\n",
    "    nums = list(range(start, stop + 1, step))\n",
    "    # TODO: 修改上面的None\n",
    "    return nums"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "b90bed88-663a-49d6-9fbc-0b27df41dc29",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"
      ]
     },
     "execution_count": 55,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "list(qrange2(1, 10, 1))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "94bff736-14bc-43ae-9494-90781bb8ace7",
   "metadata": {},
   "outputs": [],
   "source": [
    "variable = my_method(canshu1, canshu2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "65b45a4b-60a2-437d-a7a1-9390d9d2bee9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "a\n",
      "None\n"
     ]
    }
   ],
   "source": [
    "a = print(\"a\")\n",
    "print(a)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "id": "f68bd8fa-7a3d-45d9-b65b-02186e55b851",
   "metadata": {},
   "outputs": [],
   "source": [
    "def qrange3(start, stop, step):\n",
    "    nums = range(start, stop + 1, step)\n",
    "    return nums"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "id": "23e73a26-419a-4de3-8b04-790f32df7a67",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "range(1, 101)"
      ]
     },
     "execution_count": 59,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "qrange3(1, 100, 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "id": "230312aa-92dc-4408-ac1c-0dffc90b13c6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "range(1, 100)"
      ]
     },
     "execution_count": 60,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "range(1, 100, 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "id": "6537eb44-0ad3-4379-a91b-8868b30efad8",
   "metadata": {},
   "outputs": [],
   "source": [
    "def qrange4(start, stop, step):\n",
    "    return range(start, stop + 1, step)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "id": "ae266b2d-4b18-4660-ba40-64c2b91da4a3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "range(1, 101)"
      ]
     },
     "execution_count": 63,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "qrange4(1, 100, 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "id": "b7c0631d-3736-495b-be06-04c53921ccdf",
   "metadata": {},
   "outputs": [
    {
     "ename": "TypeError",
     "evalue": "qrange4() missing 2 required positional arguments: 'stop' and 'step'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-65-31b742775c43>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m# ????\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mqrange4\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;31mTypeError\u001b[0m: qrange4() missing 2 required positional arguments: 'stop' and 'step'"
     ]
    }
   ],
   "source": [
    "# ????\n",
    "qrange4(1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "id": "ef30a473-9c94-43d7-829c-efd48128fa19",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "range(0, 1)"
      ]
     },
     "execution_count": 66,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "range(1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ac3f3f62-7bb0-4f00-9a4e-4085b96c14dd",
   "metadata": {},
   "source": [
    "#### 2. 充分理解`goto(x, y)`的意义"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "877a379e-17ab-49b7-86be-14344f17b3c0",
   "metadata": {},
   "outputs": [],
   "source": [
    "st()             # show turtle\n",
    "pu()\n",
    "goto(100, 0)     # turtle moved to 2.0 on x Axis.\n",
    "dot(5, \"red\")\n",
    "goto(100, 50)    # turtle moved to 50 pixels above 2.0 on x Axis\n",
    "dot(5, \"blue\")\n",
    "goto(100, -50)   # turtle moved to 50 pixles below 2.0 on x Axis\n",
    "dot(5, \"black\")\n",
    "ht()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "43fab4d8-7ec4-4046-a25f-207ca17b7206",
   "metadata": {},
   "source": [
    "#### 3. 声明绘制一条线段的方法\n",
    "- 考虑绘制一条线段需要知道哪些数据：线段的两个端点的位置，线的粗细以及颜色\n",
    "- 给方法以及这些数据进行命名，方法名可定为`line`，两个端点的位置可以分别为`start`,`end`，线的粗细设为`linewidth`，颜色为`color`\n",
    "- 为了避免绘出的线发生重叠，考虑讲线段整体网上平移一定的距离，这个距离可以用变量`offset`来表示，\n",
    "- 不要忘记了还有一个比例尺，用变量`scale`表示。\n",
    "\n",
    "这样我们可以如下声明绘制线条的方法:\n",
    "```python\n",
    "def line(start, end, linewidth, color, offset, scale):\n",
    "    #TODO: need implementation 需要实现该方法\n",
    "    return\n",
    "```\n",
    "其中`def`是一个关键词，它表明将要声明一个方法`line`是方法名，上述所有在方法名后的括号`()`内声明的变量名又叫方法接受的**参数**。改行以冒号`:`结束，随后每一行代码相对于`def`都有缩进，直到最后执行`return`语句，完成这个方法或者缩进结束。冒号以后开始的直至`return`语句（或者缩进结束）构成了这个方法的**方法体**。"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c8393444-89d0-4f28-a491-0a5e343b4b62",
   "metadata": {},
   "source": [
    "#### 4. 实现先前声明的方法\n",
    "\n",
    "实现一个方法指的是在方法体内部编写代码以完成方法设定的功能的过程。\n",
    "\n",
    "在`line`方法体内，我们需要依次完成下面5个步骤：\n",
    "1. 提起画笔\n",
    "2. 移动画笔至要绘制线段的一个端点(`start`)，端点的位置与参数`start`、`offset`和`scale`的值有关。\n",
    "3. 设定好画笔的颜色和粗细\n",
    "4. 落下画笔准备绘制\n",
    "5. 移动画笔至要绘制线段的另一个端点(`end`)，同样位置需要计算得到。\n",
    "\n",
    "在上面的几个步骤中，设置画笔颜色和粗细这一步的次序可以相对随意些。\n",
    "\n",
    "这样我们可以如下声明绘制线条的方法：\n",
    "```python\n",
    "def line(start, end, linewidth, color, offset, scale):\n",
    "    pu()                                   # 提起画笔\n",
    "    pen(penize=linewidth, pencolor=color)  # 设定画笔粗细和颜色\n",
    "    goto(start * scale, offset)            # 移动画笔至某端点\n",
    "    pd()                                   # 落下画笔准备绘图\n",
    "    goto(end * scale, offset)              # 移动画笔值另端点完成线条绘制\n",
    "    return                                 # 离开方法，返回。\n",
    "```\n",
    "有了这样的实现，我们就可以在代码中调用这个方法来完成一条线段的绘制，下面的代码使用黑色的画笔，3个像素的粗细来绘制一条从(-4.5*SCALE, 15)表示的点到（-2.0*SCALE, 15)表示的点之间的线段。这条线段位于x轴上方5个像素。如下图所示：\n",
    "```python\n",
    "line(-4.5, -2.0, 3, \"black\", 15, SCALE)\n",
    "```\n",
    "\n",
    "<img src=\"figures/L015_one_line.png\" width=\"600px\"/>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "72d7d1f6-b0b7-492c-8ce6-ae9b8b04f89d",
   "metadata": {},
   "source": [
    "在调用方法时，给方法提供的参数的次序需要与声明方法时的次序一致，否则会出错或预期以外的功能。\n",
    "\n",
    "如果需要给绘制的线段进行标号，那么需要额外完成一些诸如：提起、移动画笔和绘制文字的步骤。同时我们还应该有标号使用的数字（或文字），需要新设定一个参数来表示它，可以用`label`来表示，下面的代码请读者自己添加这几行代码给这个方法添加线段标号的功能。\n",
    "```python\n",
    "def line(start, end, linewidth, color, offset, scale, label):\n",
    "    # .....                           # 省略了之前的一些代码\n",
    "    pu()                              # 提起画笔\n",
    "    goto(start * scale - 10, offset)  # 移动画笔至要标号的位置\n",
    "    write(str(label), align=\"right\")  # 书写标号使用默认字体\n",
    "    return                            # 离开方法，返回\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ea455b6a-6e8a-4407-9ab3-fc430668daf2",
   "metadata": {},
   "source": [
    "#### 5. 练习：\n",
    "1. 补全line方法使得其可以对所绘制的线段进行标号"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "52b9f525-e30f-420b-8743-c1f910d7100a",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "cd941e81-14ae-4482-ba28-329f69e2411f",
   "metadata": {},
   "source": [
    "2. 调用你刚刚完成的具有标号功能的`line`方法，绘制一条线段。线段的起点对应数轴上-2.0表示的位置，终点对应数轴上5.0表示的位置，线宽选择5个像素，颜色从提供的颜色中任意选择一种，绘制的线段距离x轴的约50像素远，比例尺选择默认的比例尺，标号用你自己的名字字符串（例如\"Celine\"）。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d1942d42-c3ac-4747-a852-60d369670d99",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "51c28b11-2b6e-4505-a253-9e5d727aa315",
   "metadata": {},
   "source": [
    "### 3. Solution 编程求解"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1385bffc-5e4a-4f81-93de-d457a3ac8f9e",
   "metadata": {},
   "outputs": [],
   "source": [
    "def line(start, end, linewidth, color, offset, scale, label):\n",
    "    pu()                                   # 提起画笔\n",
    "    pen(pensize=linewidth, pencolor=color) # 设定画笔粗细和颜色\n",
    "    goto(start * scale, offset)            # 移动画笔至某端点\n",
    "    pd()                                   # 落下画笔准备绘图\n",
    "    goto(end * scale, offset)              # 移动画笔值另端点完成线条绘制\n",
    "    pu()                                   # 提起画笔\n",
    "    goto(start * scale - 10, offset)       # 移动画笔至要标号的位置\n",
    "    write(str(label), align=\"right\")       # 书写标号使用默认字体\n",
    "    return                                 # 离开方法，返回"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7cf47ff7-50c8-4c5e-8540-bd0da146a045",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "i, j = 0, 1\n",
    "height = 10\n",
    "n_drawn = 0\n",
    "while i < len(nums) - 1:\n",
    "    j = i + 1\n",
    "    while j < len(nums):\n",
    "        line(nums[i], nums[j], 3, colors[n_drawn % n_colors],  # 可以换行\n",
    "             height * (n_drawn + 1), SCALE, label=n_drawn+1)\n",
    "        n_drawn += 1\n",
    "        j += 1\n",
    "       \n",
    "    i += 1"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "latest-contamination",
   "metadata": {},
   "source": [
    "### Summary 知识点小结"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "afb3f674",
   "metadata": {},
   "source": [
    "1. 如何用循环嵌套循环来列举各种可能的排列组合\n",
    "2. 充分理解`goto`方法及其接受的参数的意义\n",
    "3. 学习编写接受参数的方法，理解参数的次序的重要性\n",
    "4. 学习调用自己编写的方法\n",
    "5. 复习`dot`方法，复习比例尺概念"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bizarre-assurance",
   "metadata": {},
   "source": [
    "### 计算机小知识"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "92100f08",
   "metadata": {},
   "source": [
    "暂缺"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "digital-consensus",
   "metadata": {
    "heading_collapsed": true
   },
   "source": [
    "### Assignments 作业\n",
    "**注意**：本讲所有的作业涉及到绘图时均使用本讲示例所使用的数轴和比例尺。"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "controversial-sleeve",
   "metadata": {
    "hidden": true
   },
   "source": [
    "1. 创建两个不同的方法计算两个不同的正整数之间所有正整数的和，其中一个方法得到的和包括给出的这两个正整数参数；另一个方法得到的和不包括给出的这两个正整数参数。在两个方法体内部输出得到的和。观察比较结果有什么不一样。并用下面的一系列数据来测试你编写的方法。\n",
    "\n",
    "\n",
    "   | num1      |  num2      |  sum(include num1,2) | sum(exclude num1,2) |\n",
    "   | ---------:|-----------:|:---------------------|:--------------------|\n",
    "   |   12      |   12       |  sum(inclu) = 24     | sum(exclu) = 0      |\n",
    "   |    1      |   10       |  sum(inclu) = 55     | sum(exclu) = 44     |\n",
    "   |   10      |    1       |  sum(inclu) = 55     | sum(exclu) = 44     |   \n",
    "   |  100      | 1000       |  sum(inclu) = 495550 | sum(exclu) = 494450 |   "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1e09427e-fe9b-4260-a76c-1fcf6a4304b3",
   "metadata": {},
   "outputs": [],
   "source": [
    "def bread_factory(water, farine, sugar):\n",
    "    bread = None\n",
    "    # 和面，加糖，搅拌\n",
    "    # 且\n",
    "    # bread != None\n",
    "    # producing... manufacturing\n",
    "    \n",
    "    print(\"我做了多少面包:{}\".format(bread))\n",
    "    return"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5716418f-05d2-4168-8252-5bc524ba11eb",
   "metadata": {},
   "source": [
    "- Method1: 1 10 => 1 + 2 + 3 + ... + 8 + 9 + 10 = 55\n",
    "- Method2: 1 10 => 2 + 3 + ... + 8 + 9 = 44\n",
    "\n",
    "\n",
    "- method1:\n",
    "\n",
    "  m n => m + (m+1) + (m+2) + ... + (n-2) + (n-1) + n (m<=n)  \n",
    "  m n => n + (n+1) + (n+2) + ... + (m-2) + (m-1) + m (n<=m)\n",
    "                \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "357865bc-2b14-4238-86ce-458c59ce707e",
   "metadata": {},
   "outputs": [],
   "source": [
    "def sum_method1(m, n):\n",
    "    result = 0\n",
    "\n",
    "    if m > n:\n",
    "        m, n = n, m    # exchange\n",
    "        \n",
    "    cur_num = m        \n",
    "    while cur_num <= n:\n",
    "        result = result + cur_num\n",
    "        cur_num += 1\n",
    "    \n",
    "    print(\"res: {}\".format(result))\n",
    "    return"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0ba9f722-26bd-43cd-89c6-59594985c099",
   "metadata": {},
   "outputs": [],
   "source": [
    "m, n = 10, 1\n",
    "sum_method1(m, n)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "74d316ce-3354-46b9-8237-751dfcbe89d9",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "30189105-a381-4733-bb10-241a2305122e",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5d1d5395-dda6-45bf-a0d9-34a002330adb",
   "metadata": {},
   "outputs": [],
   "source": [
    "def sum_include(num1, num2):\n",
    "    smaller, larger = num1, num2\n",
    "    if smaller > larger:\n",
    "        smaller, larger = num2, num1\n",
    "    cur_num, result = smaller, 0\n",
    "    while cur_num <= larger:\n",
    "        result += cur_num\n",
    "        cur_num += 1\n",
    "    \n",
    "    print(\"sum(inclu) = {}\".format(result))\n",
    "    \n",
    "def sum_exclude(num1, num2):\n",
    "    smaller, larger = num1, num2\n",
    "    if smaller > larger:\n",
    "        smaller, larger = num2, num1\n",
    "    cur_num, result = smaller + 1, 0\n",
    "    while cur_num < larger:\n",
    "        result += cur_num\n",
    "        cur_num += 1\n",
    "    \n",
    "    print(\"sum(exclu) = {}\".format(result))\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b8b5098a-9e3d-4b6e-b659-3f93007a7611",
   "metadata": {},
   "outputs": [],
   "source": [
    "sum_include(12, 12)\n",
    "sum_exclude(12, 12)\n",
    "sum_include(1, 10)\n",
    "sum_exclude(10, 1)\n",
    "sum_include(100, 1000)\n",
    "sum_exclude(100, 1000)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e39bdaad-d130-43a9-bd96-a2abdc8ba199",
   "metadata": {},
   "source": [
    "2. 仅编写一个方法来完成前一题。\n",
    "\n",
    "   **提示**：在创建这个新方法时，新增加一个参数，这个参数可以取两个不同的值，在方法体内不根据这个参数的值来动态的决定计算的和是否包括前两个正整数参数。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "bae0a7e2-2004-4efd-b393-2a588d3a8b7b",
   "metadata": {},
   "outputs": [],
   "source": [
    "def sum_optional(num1, num2, include):\n",
    "    smaller, larger = num1, num2       # smaller, larger \n",
    "    if smaller > larger:\n",
    "        smaller, larger = num2, num1   # make sure smaller <= larger\n",
    "    result = 0\n",
    "    cur_num, max_num = smaller + 1, larger - 1   # initialte: cur_num\n",
    "    if include == True:                  \n",
    "        cur_num = smaller\n",
    "        max_num = larger               # adjust cur_num\n",
    "    while cur_num <= max_num:          # normal routine.\n",
    "        result += cur_num\n",
    "        cur_num += 1\n",
    "    \n",
    "    print(\"sum(inclu) = {}\".format(result))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "3b74c451-a59e-4dfd-91b4-1f1d2e3b13bb",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "sum(inclu) = 12\n",
      "sum(inclu) = 0\n",
      "sum(inclu) = 55\n",
      "sum(inclu) = 44\n",
      "sum(inclu) = 495550\n",
      "sum(inclu) = 494450\n"
     ]
    }
   ],
   "source": [
    "sum_optional(12, 12, True)\n",
    "sum_optional(12, 12, False)\n",
    "sum_optional(1, 10, True)\n",
    "sum_optional(10, 1, False)\n",
    "sum_optional(100, 1000, True)\n",
    "sum_optional(100, 1000, False)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "016ee845-734f-4557-ae59-49bab8a9fc44",
   "metadata": {},
   "source": [
    "3. 声明并且实现一个方法，该方法接受数轴上的一个点表示的数字作为参数1，另一个数作为参数2，完成以参数1为表示的位置为中心、参数2表示的数据为边长其中两条边平行于x轴的正方形的绘制，同时要求你实现的这个方法在绘制正方形时可以在调用方法时确定正方形边的颜色和线宽。\n",
    "   实现这个方法后，用下面的数据来绘制3个正方形。结果应如图所示：\n",
    "   | center    |  side length |  color    |   line width   |  \n",
    "   | ---------:|-----------:|:---------:|:---------:|\n",
    "   |   -2.0    |   2.0      |  red      |   3     |\n",
    "   |    1.5    |   3.0      |  green    |   4     |\n",
    "   |    0.0    |   1.0      |  blue     |   3     |\n",
    "   \n",
    "   \n",
    "   **要求**：使用`goto`方法来移动画笔，禁止使用`left`,`right`,`fd`,`bk`等方法。\n",
    "   \n",
    "   <img src=\"figures/L015_exercise_3.png\" width=\"600px\"/>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9a20d751-3e2b-46ec-b927-b51fe90ff100",
   "metadata": {},
   "outputs": [],
   "source": [
    "def square(center, side_length, color, line_width, scale):\n",
    "    pu()\n",
    "    center = center * scale\n",
    "    side_length = side_length * scale\n",
    "    half_side = side_length/2\n",
    "    goto(center + half_side, -half_side)\n",
    "    pen(pensize=line_width, pencolor=color)\n",
    "    pd()\n",
    "    goto(center + half_side, half_side)\n",
    "    goto(center - half_side, half_side)\n",
    "    goto(center - half_side, -half_side)\n",
    "    goto(center + half_side, -half_side)\n",
    "    return\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "96c72b57-302b-490e-9ec2-46aaf6e2caa1",
   "metadata": {},
   "outputs": [],
   "source": [
    "reset()\n",
    "draw_axis(width, height, SCALE)\n",
    "square(-2.0, 2.0, \"red\", 3, SCALE)\n",
    "square(1.5, 3.0, \"green\", 4, SCALE)\n",
    "square(0.0, 1.0, \"blue\", 3, SCALE)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a52103c9-4f5d-4690-8be7-e54dae4286eb",
   "metadata": {
    "hidden": true
   },
   "source": [
    "4. 声明并且实现一个方法，该方法接受数轴上的两个不同的点表示的数字作为参数，完成以这两个点为端点的位于数轴上方的一个正三角形的绘制，同时要求你实现的这个方法在绘制正三角形时可以在调用方法时确定三角形边的颜色和线宽。\n",
    "   实现这个方法后，用下面的数据来绘制3个三角形。结果应如图所示：\n",
    "   | num1      |  num2      |  color    |   line width   |  \n",
    "   | ---------:|-----------:|:---------:|:---------:|\n",
    "   |   -4.5    |   0.0      |  red      |   3     |\n",
    "   |   -2.0    |   1.5      |  green    |   4     |\n",
    "   |   1.5     |   3.5      |  blue     |   5     |\n",
    "   \n",
    "   \n",
    "   **要求**：尽可能不使用`left`,`right`,`fd`,`bk`等方法，而使用`goto`方法来移动画笔。   \n",
    "   **提示**：使用goto方法时，需要用到一个数值`1.732`来帮助定位三角形的端点。请在你实现方法的代码里使用这个数值。\n",
    "   \n",
    "     <img src=\"figures/L015_exercise_4.png\" width=\"600px\"/>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8723598d-2088-434f-9ad3-36f5ecd7ef71",
   "metadata": {},
   "outputs": [],
   "source": [
    "def regular_triangle(num1, num2, color, line_width, scale):\n",
    "    num1 *= scale\n",
    "    num2 *= scale\n",
    "    side_length = num1 - num2\n",
    "    if side_length < 0:\n",
    "        side_length = -side_length\n",
    "    pen(pensize=line_width, pencolor=color)\n",
    "    pu()\n",
    "    goto(num1, 0)\n",
    "    pd()\n",
    "    goto(num2, 0)\n",
    "    num3_x, num3_y = (num1+num2)/2, side_length * 1.732 / 2\n",
    "    goto(num3_x, num3_y)\n",
    "    goto(num1, 0)    \n",
    "    return"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ddfa025e-6465-4721-8e92-24afe60940ab",
   "metadata": {},
   "outputs": [],
   "source": [
    "reset()\n",
    "draw_axis(width, height, SCALE)\n",
    "regular_triangle(-4.5, 0, \"red\", 3, SCALE)\n",
    "regular_triangle(-2.0, 1.5, \"green\", 4, SCALE)\n",
    "regular_triangle(1.5, 3.5, \"blue\", 5, SCALE)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bb3720ff-3cbc-476e-a7fb-ed0bc00537d8",
   "metadata": {},
   "source": [
    "5. 用数字\"1,2,3,4\"这4个数字来组成一个5位数，其中每一个数至少用到1次，一共可以组成多少个5位数，其中最小的和最大的数分别是什么数？\n",
    "\n",
    "   **提示1**: `123 = 1*100 + 2*10 + 3*1`  \n",
    "   **提示2**: 可以使用一个`list`类型的变量，把所有找到的5位数都存放在这个变量中，这个列表型变量的长度就是所有5位数的个数，列表中最大和最小的元素就分别是能形成的最大的和最小的5位数"
   ]
  },
  {
   "cell_type": "raw",
   "id": "c7971a27-cef1-4aba-862b-af2e0e60bdf8",
   "metadata": {},
   "source": [
    "1,2,3,4,1  = 11234, 11243, 11324, ... 11234, 11243\n",
    "\n",
    "1,2,3,4,2 = 12234, 12243, ...\n",
    "\n",
    "1,2,3,4,3 = 12334, ...\n",
    "\n",
    "1,2,3,4,4 = 12344, ..."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "e0fcdf08-9b28-44fb-9c1b-fbfc1e94e40d",
   "metadata": {},
   "outputs": [],
   "source": [
    "def my_permutations(candidates): # candidates could be [1, 2, 3, 4, 5]\n",
    "    result = []\n",
    "    # not completed\n",
    "    return "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "5a7e4591-20f5-45eb-960b-7f08ea037463",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "240 numbers\n",
      "12341, 12314, 12431, 12413, 12134, 12143, 13241, 13214, 13421, 13412, 13124, 13142, 14231, 14213, 14321, 14312, 14123, 14132, 11234, 11243, 11324, 11342, 11423, 11432, 21341, 21314, 21431, 21413, 21134, 21143, 23141, 23114, 23411, 24131, 24113, 24311, 31241, 31214, 31421, 31412, 31124, 31142, 32141, 32114, 32411, 34121, 34112, 34211, 41231, 41213, 41321, 41312, 41123, 41132, 42131, 42113, 42311, 43121, 43112, 43211, 12342, 12324, 12432, 12423, 12234, 12243, 13242, 13224, 13422, 14232, 14223, 14322, 21342, 21324, 21432, 21423, 21234, 21243, 23142, 23124, 23412, 23421, 23214, 23241, 24132, 24123, 24312, 24321, 24213, 24231, 22134, 22143, 22314, 22341, 22413, 22431, 31242, 31224, 31422, 32142, 32124, 32412, 32421, 32214, 32241, 34122, 34212, 34221, 41232, 41223, 41322, 42132, 42123, 42312, 42321, 42213, 42231, 43122, 43212, 43221, 12343, 12334, 12433, 13243, 13234, 13423, 13432, 13324, 13342, 14233, 14323, 14332, 21343, 21334, 21433, 23143, 23134, 23413, 23431, 23314, 23341, 24133, 24313, 24331, 31243, 31234, 31423, 31432, 31324, 31342, 32143, 32134, 32413, 32431, 32314, 32341, 34123, 34132, 34213, 34231, 34312, 34321, 33124, 33142, 33214, 33241, 33412, 33421, 41233, 41323, 41332, 42133, 42313, 42331, 43123, 43132, 43213, 43231, 43312, 43321, 12344, 12434, 12443, 13244, 13424, 13442, 14234, 14243, 14324, 14342, 14423, 14432, 21344, 21434, 21443, 23144, 23414, 23441, 24134, 24143, 24314, 24341, 24413, 24431, 31244, 31424, 31442, 32144, 32414, 32441, 34124, 34142, 34214, 34241, 34412, 34421, 41234, 41243, 41324, 41342, 41423, 41432, 42134, 42143, 42314, 42341, 42413, 42431, 43124, 43142, 43214, 43241, 43412, 43421, 44123, 44132, 44213, 44231, 44312, 44321, "
     ]
    }
   ],
   "source": [
    "from itertools import permutations\n",
    "\n",
    "def tuple_to_number(tpl_n): # convert a tpl_n like (1, 2, 3, 4, 5) to a int: 12345\n",
    "    str_n = \"\"\n",
    "    for n in tpl_n:\n",
    "        str_n += str(n)\n",
    "    return int(str_n)\n",
    "\n",
    "digits = [1, 2, 3, 4]\n",
    "\n",
    "numbers_5_digits = []  # store final result\n",
    "\n",
    "for digit in digits:\n",
    "    digits_to_build_number = [1, 2, 3, 4]\n",
    "    digits_to_build_number.append(digit) # like [1, 2, 3, 4, 1], [1, 2, 3, 4, 2], ... \n",
    "    \n",
    "    candidates = list(permutations(digits_to_build_number))\n",
    "    for tpl_num in candidates:\n",
    "        candidate = tuple_to_number(tpl_num)\n",
    "        if candidate not in numbers_5_digits:\n",
    "            numbers_5_digits.append(candidate)\n",
    "            \n",
    "\n",
    "#print(numbers_5_digits)\n",
    "print(\"{} numbers\".format(len(numbers_5_digits)))\n",
    "for number in numbers_5_digits:\n",
    "    print(number, end=\", \")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9b923b06-b6a8-4108-b9eb-f501c7759df6",
   "metadata": {},
   "outputs": [],
   "source": [
    "(\"1\", \"2\", \"3\", \"4\", \"4\"),  (\"1\", \"2\", \"3\", \"4\", \"3\"),  #120"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
