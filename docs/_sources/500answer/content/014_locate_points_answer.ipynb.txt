{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "cooked-blues",
   "metadata": {},
   "source": [
    "## 第14讲 在数轴上标记不同的数"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "informal-johns",
   "metadata": {
    "heading_collapsed": true
   },
   "source": [
    "### Assignments 作业"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "caroline-angel",
   "metadata": {},
   "source": [
    "1. **Mass** is the amount of \"matter\" in an object (though \"matter\" may be difficult to define), whereas **weight** is the force exerted on an object by gravity. In other words, an object with a mass of 1.0 kilogram weighs approximately 9.81 newtons on the surface of the Earth, which is its mass multiplied by the gravitational field strength. The object's weight is less on Mars, where gravity is weaker, and more on Saturn, and very small in space when far from any significant source of gravity, but it always has the same mass.\n",
    "\n",
    "   **质量**是物体中“物质”的数量（尽管“物质”可能难以定义），而**重量**是地球吸引物体的力量，也就是重力作用在物体上的力，。 换句话说，一个质量为 1.0 千克的物体在地球表面上的重量约为 9.81 牛顿，即其质量乘以引力场强度。该物体的重量在火星上较小，那里的重力较弱，而在土星上则较大，并且在远离任何重要重力源的空间中非常小，但它的质量始终相同。\n",
    "\n",
    "   Answer the following question step by step: \n",
    "   依次回答下面的问题：\n",
    "   1. Measure what the mass yourself is on a scales at home with the help of your Mom or Dad, observe the reading of the scale and the unit. 在爸爸妈妈的帮助下用家里的秤称一称自己，看看上面的读数是多少，单位是什么。\n",
    "   2. Then write a program to calculate how many forces you are attracted by Earth. 编程计算你受到的球的吸引力有多少牛顿。\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "realistic-carroll",
   "metadata": {},
   "outputs": [],
   "source": [
    "def my_weight():\n",
    "    mass = int(input(\"your mass please. please input a integer\"))\n",
    "    weight = 9.81 * mass\n",
    "    print(\"your mass is {} and your weight is {} newton\".format(mass, weight))\n",
    "    print(\"the equation is: {}kg (your mass)x 9.81(number of newtons in a kg).\".format(mass))\n",
    "    \n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "anticipated-nitrogen",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "your mass please. please input a integer 23\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "your mass is 23 and your weight is 225.63000000000002 newton\n",
      "the equation is: 23kg (your mass)x 9.81(number of newtons in a kg).\n"
     ]
    }
   ],
   "source": [
    "my_weight()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dense-turning",
   "metadata": {
    "hidden": true
   },
   "source": [
    "2. Write a method to compare two numbers and tell which number is larger. Requirements:\n",
    "   创建一个方法用来判断给定的两个数哪一个大。要求：\n",
    "   1. the method name is `larger_num`, 方法名为`larger_num`;\n",
    "   2. the method accepts two parameters, the names of which is up to you. 方法接受两个整数型参数，参数名可自由设定\n",
    "   3. within the method, compare the values of the two parameters, output the larger one with the format of \"XX is larger.\". If two numbers are euqal output: \"Two numbers are equal.\" 在方法内部，比较这两个数，打印输出较大的那个数，如果两个数相等则打印输出“两个数相等”。\n",
    "\n",
    "   Run and test your methods 5 time with the following values of parameters. Observe if your method's output is the same as the output provided below. 创建好这个方法后，依次用下面的两组数来测试你创建的方法，观察输出的结果是否与预期的结果相同：\n",
    "   \n",
    "  | num1        |     num2     |     Output         |\n",
    "  | ----------- |:------------:| ------------------:|\n",
    "  | 12          |     12       | Two numbers are equal. |\n",
    "  | 18          |     14       | 18 is larger.     |\n",
    "  | 0           |     4        | 4 is larger.      |\n",
    "  | 1091        |     0        | 1091 is larger.    |\n",
    "  | 0           |     0        | Two numbers are equal.    |\n",
    "  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "seeing-bahamas",
   "metadata": {},
   "outputs": [],
   "source": [
    "def larger_num(num1, num2):\n",
    "    if num1 > num2:\n",
    "        print(\"{} is larger.\".format(num1))\n",
    "    elif num1 == num2:\n",
    "        print(\"Two numbers are equal.\")\n",
    "    elif num1 < num2:\n",
    "        print(\"{} is larger.\".format(num2))\n",
    "    return\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "advance-energy",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Two numbers are equal.\n",
      "18 is larger.\n",
      "4 is larger.\n",
      "1091 is larger.\n",
      "Two numbers are equal.\n"
     ]
    }
   ],
   "source": [
    "larger_num(12, 12)\n",
    "larger_num(18, 14)\n",
    "larger_num(0, 4)\n",
    "larger_num(1091, 0)\n",
    "larger_num(0, 0)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "equivalent-spread",
   "metadata": {
    "hidden": true
   },
   "source": [
    "3. Write method to calculate and print out the sum of two integers that you input from the keyboard. Requirements: \n",
    "   创建一个方法来计算两个整数的和并输出结果。要求:\n",
    "   1. 方法名为`get_sum`，该方法不接受任何参数。\n",
    "   2. within the method, write codes to receive two number strings from keyboard 你的代码能够从键盘接受两个数字字符串\n",
    "   3. within the method, convert these two strings to two Integer numbers, assign them to two variables. The names of the two Integer variables can be decided as you like 将这两个字符串转化为两个整数型数字并将其赋值给两个变量，变量名可以根据你自己的喜好来设定\n",
    "   4. within the method, calculate the sum of the two Integer variables, assign the result to a new Variable named `result` 计算这两个整型变量的和，并将结果赋值给一个叫`result`的变量\n",
    "   5. within the method, print out the type of the `result` variable 打印输出变量`result`的数据类型\n",
    "   6. within the method, display the result on screen with a readable sentence. 打印输出一个通俗易懂的句子来显示你计算得到的结果\n",
    "  \n",
    "  Run and test 5 times your method. Each time when inputs from keyboard are required, provide the following values for the two numbers. Observe whether the output of the method is the same as the sum for each test 运行5次你创建的方法，分别使用下表中的num1,num2的值作为键盘输入运行并测试你的代码共计5次，观察结果是否与对应的Sum一样\n",
    "  \n",
    "  **Your should run the method on all test data; that being said, you may not change the codes between each run.** \n",
    "  **你应该用同样的代码来运行所有的测试数据，也就是说，你不应该在两次测试间隙修改你的代码**\n",
    "  \n",
    "  \n",
    "  | num1        |     num2     |     Output         |\n",
    "  | ----------- |:------------:| ------------------:|\n",
    "  | 12          |     12       | The sum is 24      |\n",
    "  | 18          |     14       | The sum is 32      |\n",
    "  | 0           |     4        | The sum is 4       |\n",
    "  | 1091        |     0        | The sum is 1091    |\n",
    "  | 0           |     0        | The sum is 0       |\n",
    "  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "manufactured-bearing",
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_sum():\n",
    "    num1 = int(input(\"num1 please\"))\n",
    "    num2 = int(input(\"num2 please\"))\n",
    "    result = num1 + num2\n",
    "    print(type(result))\n",
    "    print(\"The sum is {}\".format(result))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "literary-investment",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "num1 please 12\n",
      "num2 please 12\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'int'>\n",
      "The sum is 24\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "num1 please 18\n",
      "num2 please 14\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'int'>\n",
      "The sum is 32\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "num1 please 0\n",
      "num2 please 4\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'int'>\n",
      "The sum is 4\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "num1 please 1091\n",
      "num2 please 0\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'int'>\n",
      "The sum is 1091\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "num1 please 0\n",
      "num2 please 0\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'int'>\n",
      "The sum is 0\n"
     ]
    }
   ],
   "source": [
    "# TODO: execute your methods here 5 times with values of parameters provided.\n",
    "get_sum()\n",
    "get_sum()\n",
    "get_sum()\n",
    "get_sum()\n",
    "get_sum()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "oriental-testing",
   "metadata": {},
   "source": [
    "4. Write a method to calculate and print out the perimeter and area of a rectagle with the length and width provided by keyboard. 创建一个方法来计算一个长方形的周长和面积，确定这个长方形的长和宽从键盘输入得到。Requirements: 要求:\n",
    "   1. 方法名为`perimeter_and_area`, 该方法接受两个整数型参数，试图代表矩形的两个边长。\n",
    "   2. within the method, verify whether two parameters provided can form a rectangle or not. If not, print out \"Not a rectangle\"; otherwise, continue the following steps\n",
    "   3. within the method, calculate the perimiter and the area of this rectangle, assign the result to `perimeter` and `area` variable 计算这个长方形的周长和面积，并将结果分别赋值给名为`perimeter`和`area`的变量\n",
    "   4. within the method, print out the value of the `perimeter`和`area` variables 打印输出变量`perimeter`和`area`的结果\n",
    "\n",
    "   Run and test 5 times your method with the following inputs (length, width) for each test. Observe whether the results are equal to the Perimeter and Area for each test 分别使用下表中的length和width的值作为键盘输入运行并测试你的代码共计5次，观察结果是否与对应的Perimiter和Area值一样\n",
    "  \n",
    "   **Your should run the method on all test data.** \n",
    "   **你应该用同样的代码来运行所有的测试数据。**\n",
    "  \n",
    "  \n",
    "  \n",
    "  | length    |  width     |        output                   |\n",
    "  | --------- |:----------:|:-------------------------------:|\n",
    "  |   12      |   12       | perimeter is: 48, area is: 144  |\n",
    "  |   18      |   14       | perimeter is: 48, area is: 144  |\n",
    "  |   0       |   4        |      Not a rectangle           |\n",
    "  |   1091    |   0        |      Not a rectangle           |\n",
    "  |   0       |   0        |      Not a rectangle           |"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "positive-privilege",
   "metadata": {},
   "outputs": [],
   "source": [
    "def perimeter_and_area(lenght, wigth):\n",
    "    side1 = int(lenght)\n",
    "    side2 = int(wigth)\n",
    "    \n",
    "    if side1 == 0 or side2 == 0:\n",
    "        print(\"Not a rectangle\")\n",
    "    else:\n",
    "        perimeter = (side1 + side2) * 2\n",
    "        area = side1 * side2\n",
    "        print(\"perimeter is:{}, area is: {}\".format(perimeter, area))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "featured-installation",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "perimeter is:48, area is: 144\n",
      "perimeter is:64, area is: 252\n",
      "Not a rectangle\n",
      "Not a rectangle\n",
      "Not a rectangle\n"
     ]
    }
   ],
   "source": [
    "perimeter_and_area(12, 12)\n",
    "perimeter_and_area(18, 14)\n",
    "perimeter_and_area(0, 4)\n",
    "perimeter_and_area(1091, 0)\n",
    "perimeter_and_area(0, 0)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
