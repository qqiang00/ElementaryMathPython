{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "relative-location",
   "metadata": {},
   "source": [
    "## 第20讲 线段与坐标轴的平行关系及长度"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "digital-consensus",
   "metadata": {
    "heading_collapsed": true
   },
   "source": [
    "### Answer for Assignments 作业参考答案\n",
    "\n",
    "<span style=\"color:red\">**Run the following codes to open draw area and register the two methods before running the answer codes for each assignment**</span>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "b1ae7be3-fdde-46b5-820e-c35a55d2fbe0",
   "metadata": {},
   "outputs": [],
   "source": [
    "from turtle import setup, reset, pu, pd, bye, left, right, fd, bk, screensize\n",
    "from turtle import goto, seth, write, ht, st, home, dot, pen, speed\n",
    "from qianglib import prepare_paper, draw_grid, mark, lines, line, polygon, text"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "bed66e63-7d02-4c22-bf10-8863883aab94",
   "metadata": {},
   "outputs": [],
   "source": [
    "width, height = 800, 600\n",
    "setup(width, height, 0, 0)\n",
    "prepare_paper(width, height, scale=20, min_x=0, min_y=0, max_y=25)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "ea36be9d-ab33-4506-9998-00973bab6823",
   "metadata": {},
   "outputs": [],
   "source": [
    "def is_parallel_to_either_axis(point1, point2):\n",
    "    \"\"\"\n",
    "    point1 : tuple of length 2, example (10, 5)\n",
    "    point2 : tuple of length 2, ...\n",
    "    return: True / False\n",
    "    \"\"\"\n",
    "    # point1 : tuple (x, y)\n",
    "    # point2 : tuple (x, y)\n",
    "    # return: True / False\n",
    "    result = None\n",
    "    dx = point1[0] - point2[0]\n",
    "    dy = point1[1] - point2[1]\n",
    "    if dx == 0 and dy == 0:\n",
    "        result = False\n",
    "    elif dx == 0 or dy == 0:\n",
    "        result = True\n",
    "    else:\n",
    "        result = False\n",
    "    return result"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "99fc640d-a0a2-4d10-b7f0-f23292cd08a4",
   "metadata": {},
   "outputs": [],
   "source": [
    "def line_length(point1, point2):\n",
    "    result = None\n",
    "    if is_parallel_to_either_axis(point1, point2):\n",
    "        result = abs(point1[0] - point2[0])\n",
    "        if result == 0:\n",
    "            result = abs(point1[1] - point2[1])\n",
    "        #print(\"length of line: {} to {} is {}\".format(point1, point2, result))\n",
    "    else:\n",
    "        if point1[0] == point2[0] and point1[1] == point2[1]:\n",
    "            #print(\"two points are same.\")\n",
    "            result = 0 # None\n",
    "        else:\n",
    "            #print(\"line: {} to {} is not parallel to either axis\".format(\n",
    "            #    point1, point2))\n",
    "            #print(\"  I don't know how to calculate its length\")\n",
    "            pass\n",
    "    return result"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "49c35ea9-0992-418c-adeb-e84731f84f8b",
   "metadata": {},
   "source": [
    "1. Given the coordinate values of eight points as follows: 已知八个点的坐标分别为:\n",
    "         \n",
    "       A. (5, 5)\n",
    "       B. (10, 0)\n",
    "       C. (20, 0)\n",
    "       D. (25, 5)\n",
    "       E. (25, 15)\n",
    "       F. (20, 20)\n",
    "       G. (10, 20)\n",
    "       H. (5, 15)\n",
    "   write code to tell, among **all** the line segments defined by any two points in the above eight points, which are parallel to X or Y axis, what are the lengthes of them?\n",
    "   编程求解这些点能够组成的**所有**线段中，有哪些是与坐标轴平行的，他们的长度分别是多少？"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "75037cfa-7f9f-41fb-b2dd-5853c7ac0242",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "line AB is not paralel X axis, nor Y axis\n",
      "line AC is not paralel X axis, nor Y axis\n",
      "line AD is parallel to either X or Y axis. the length is 20\n",
      "line AE is not paralel X axis, nor Y axis\n",
      "line AF is not paralel X axis, nor Y axis\n",
      "line AG is not paralel X axis, nor Y axis\n",
      "line AH is parallel to either X or Y axis. the length is 10\n",
      "line BC is parallel to either X or Y axis. the length is 10\n",
      "line BD is not paralel X axis, nor Y axis\n",
      "line BE is not paralel X axis, nor Y axis\n",
      "line BF is not paralel X axis, nor Y axis\n",
      "line BG is parallel to either X or Y axis. the length is 20\n",
      "line BH is not paralel X axis, nor Y axis\n",
      "line CD is not paralel X axis, nor Y axis\n",
      "line CE is not paralel X axis, nor Y axis\n",
      "line CF is parallel to either X or Y axis. the length is 20\n",
      "line CG is not paralel X axis, nor Y axis\n",
      "line CH is not paralel X axis, nor Y axis\n",
      "line DE is parallel to either X or Y axis. the length is 10\n",
      "line DF is not paralel X axis, nor Y axis\n",
      "line DG is not paralel X axis, nor Y axis\n",
      "line DH is not paralel X axis, nor Y axis\n",
      "line EF is not paralel X axis, nor Y axis\n",
      "line EG is not paralel X axis, nor Y axis\n",
      "line EH is parallel to either X or Y axis. the length is 20\n",
      "line FG is parallel to either X or Y axis. the length is 10\n",
      "line FH is not paralel X axis, nor Y axis\n",
      "line GH is not paralel X axis, nor Y axis\n"
     ]
    }
   ],
   "source": [
    "points = [(5, 5), (10, 0), (20, 0), (25, 5), \n",
    "          (25, 15), (20, 20), (10, 20), (5, 15)]\n",
    "point_names = [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\"]\n",
    "n_points = len(points) # number of points\n",
    "line_width, line_color = 1, \"black\"\n",
    "for i in range(n_points):\n",
    "    for j in range(i+1, n_points):\n",
    "            if is_parallel_to_either_axis(points[i], points[j]):\n",
    "                length = line_length(points[i], points[j])\n",
    "                line_width, line_color = 3, \"red\"\n",
    "                print(\"line {}{} is parallel to either X or Y axis.\".format(\n",
    "                    point_names[i], point_names[j]), end = \" \")\n",
    "                print(\"the length is {}\".format(length))\n",
    "            else:\n",
    "                line_width, line_color = 1, \"black\"\n",
    "                print(\"line {}{} is not paralel X axis, nor Y axis\".format(\n",
    "                    point_names[i], point_names[j]))\n",
    "            line(points[i], points[j], linewidth=line_width, color=line_color)   # draw the line\n",
    "\n",
    "# mark every point, optional\n",
    "for i in range(n_points):                \n",
    "    mark(points[i], point_names[i]+str(points[i])) "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4da6fc92-2959-40aa-847a-661b7f517ea8",
   "metadata": {},
   "source": [
    "2. Write code to draw a **line sgement** with the two end points are A(10, 10) and B(30, 10); extend the line segment horizontally until it reaches the border of the coordiante paper, which formes a **line** AB. The relation ship between any point in the paper and the line AB could only be one of the following:\n",
    "\n",
    "   编写程序在坐标纸上以点A(10, 10)和B(30, 10)为端点绘制出一条\"线段AB\"，同时左右无限延长AB可以得到一条没有端点的直线，可以记为\"直线AB\"，坐标纸中的任何一个点与直线AB的位置关系只可能是下面情况中的一种：\n",
    "   \n",
    "    1. The point is on line AB 这个点在直线AB上\n",
    "    2. The point is above line AB 这个点在直线AB的上方\n",
    "    3. The point is below line AB 这个点在直线AB的下方\n",
    "    \n",
    "    Write a method to tell the position relation ship between any point and line AB. The method only receive one parameter, which is a point defined by tuple (x, y), and output one of the three possibilities.\n",
    "    编写一个方法给出坐标纸中的任何一个点与该直线AB的位置关系。该方法只接受一个参数，它以(x, y)表示的tuple类型变量表示点的坐标，该方法返回上述三种可能的位置关系中的一种。\n",
    "    \n",
    "    For each of the following poitns, mark it in the paper, observe its position with respect to line AB. Call the method you created and compare the result of your method and your observation. Are the two result same?\n",
    "    针对下面的每一个点，在坐标纸中标记它，观察并记录它与直线AB的位置关系。随后编程调用你编写的方法，将各点的坐标作为方法的参数观察方法的返回值，比较你观察记录的结果与方法输出的结果，他们的结果是否一致？\n",
    "    1. (0, 0)\n",
    "    2. (10, 0)\n",
    "    3. (10, 10)\n",
    "    4. (20, 10)\n",
    "    5. (35, 10)\n",
    "    6. (25, 20)\n",
    "    7. (10, 23)\n",
    "    8. (0, 10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "691ce402-daa9-4030-bfa2-4ed33a581e04",
   "metadata": {},
   "outputs": [],
   "source": [
    "# clear all drawings and prepare a new paper.\n",
    "prepare_paper(width, height, scale=20, min_x=0, min_y=0, max_y=25)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "24fd5898-9ce8-45f0-be1e-c282a38b644d",
   "metadata": {},
   "outputs": [],
   "source": [
    "# draw line AB\n",
    "pointA, pointB = (10, 10), (30, 10)\n",
    "line(pointA, pointB, linewidth=3, color=\"black\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "c0d98d6c-88a6-41c0-b231-dab261ddd29b",
   "metadata": {},
   "outputs": [],
   "source": [
    "# extend line AB\n",
    "pointC, pointD = (0, 10), (38, 10)\n",
    "line(pointA, pointC, linewidth=3, color=\"red\")\n",
    "line(pointB, pointD, linewidth=3, color=\"red\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "54cc4681-e63c-4757-bdf5-a8d93a6101d7",
   "metadata": {},
   "outputs": [],
   "source": [
    "def relation_to_lineAB(point):\n",
    "    A, B = pointA, pointB\n",
    "    y_value = A[1]\n",
    "    if point[1] > y_value:\n",
    "        return \"above\"  \n",
    "    elif point[1] < y_value:\n",
    "        return \"below\"    \n",
    "    else:\n",
    "        return \"on\"     "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "f6042404-5a5e-4702-90ca-9153821d0ebf",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "point (0, 0) is below lineAB\n",
      "point (10, 0) is below lineAB\n",
      "point (10, 10) is on lineAB\n",
      "point (20, 10) is on lineAB\n",
      "point (35, 10) is on lineAB\n",
      "point (25, 20) is above lineAB\n",
      "point (10, 23) is above lineAB\n",
      "point (0, 10) is on lineAB\n"
     ]
    }
   ],
   "source": [
    "# mark every points\n",
    "points = [(0, 0), (10, 0), (10, 10), (20, 10), (35, 10), (25, 20), (10, 23), (0, 10)]\n",
    "point_names = \"ABCDEFGH\"\n",
    "for i, point in enumerate(points):\n",
    "    mark(point, point_names[i] + str(point))\n",
    "    str_relation = relation_to_lineAB(point)\n",
    "    print(\"point {} is {} lineAB\".format(point, str_relation))"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
